{"version":3,"file":"main.js","sources":["src/classes/util.js","src/classes/sound.js","src/classes/head.js","src/classes/grabber.js","src/classes/hand.js","src/classes/giant.js","src/classes/grab.js","src/classes/beer.js","src/classes/sausage.js","src/classes/van.js","src/classes/house.js","src/classes/thing.js","src/classes/rect.js","src/classes/bridge.js","src/classes/mv.js","src/classes/data.js","src/classes/playstate.js","src/index.js"],"sourcesContent":["const WIDTH = 1366\nconst HEIGHT = 768\n\nlet rect = (c, col, x, y, w, h) => {\n    c.fillStyle = col\n    c.fillRect(x, y, w, h)\n}\n\nlet fsrect = (c, col) => {\n    rect(c, col, 0, 0, WIDTH, HEIGHT)\n}\n\nlet contains = (xa, ya, xb, yb, w, h) => {\n    return xa >= xb && xa <= xb + w &&\n           ya >= yb && ya <= yb + h\n}\n\nlet getIntersectingRectangle = (r1, r2) => {  \n    [r1, r2] = [r1, r2].map(r => {\n        return {x: [r.x1, r.x2].sort(), y: [r.y1, r.y2].sort()}\n    })\n  \n    const noIntersect = r2.x[0] > r1.x[1] || r2.x[1] < r1.x[0] ||\n                        r2.y[0] > r1.y[1] || r2.y[1] < r1.y[0]\n  \n    return noIntersect ? false : {\n        x1: Math.max(r1.x[0], r2.x[0]), // _[0] is the lesser,\n        y1: Math.max(r1.y[0], r2.y[0]), // _[1] is the greater\n        x2: Math.min(r1.x[1], r2.x[1]),\n        y2: Math.min(r1.y[1], r2.y[1])\n    }\n}\n\n// returns a percentage overlap\nlet overlaps = (ax, ay, aw, ah, bx, by, bw, bh) => {\n    let a = {x1: ax, y1: ay, x2: ax + aw, y2: ay + ah}\n    let b = {x1: bx, y1: by, x2: bx + bw, y2: by + bh}\n    let r = getIntersectingRectangle(a, b)\n    \n    if(!r) {\n        return 0.0\n    } else {\n        let bsize = Math.abs((bw * bh) / 100.0)\n        let rsize = Math.abs((r.x2 - r.x1) * (r.y2 - r.y1))\n        if(rsize > 0.0 && bsize > 0.0) {\n            return rsize / bsize\n        }\n        return 0.0\n    }\n}\n\nlet text = (c, t, x, y, col, size, center) => {\n    if(size) {\n        c.font = 'bold ' + size + 'px Arial'\n    }\n    if(center) {\n        c.textAlign = \"center\";\n    }\n    c.fillStyle = col\n    c.fillText(t, x, y)\n}\n\nlet drawImage2 = (ctx, img, x, y, deg, ox, oy) => {\n    const rad = 2 * Math.PI - deg * Math.PI / 180\n    ctx.save()\n    ctx.translate( x, y )\n    ctx.rotate( rad )\n    ctx.translate( -ox, -oy )\n    ctx.drawImage( img, 0, 0 )\n    ctx.restore()\n}\n\nlet drawImage = (ctx, img, x, y, width, height, deg, flip, flop, center) => {\n    ctx.save()\n\n    if(typeof width === \"undefined\") width = img.width\n    if(typeof height === \"undefined\") height = img.height\n    if(typeof center === \"undefined\") center = false\n\n    // Set rotation point to center of image, instead of top/left\n    if(center) {\n        x -= width/2\n        y -= height/2\n    }\n    // Set the origin to the center of the image\n    ctx.translate(x + width/2, y + height/2)\n\n    // Rotate the canvas around the origin\n    const rad = 2 * Math.PI - deg * Math.PI / 180\n    ctx.rotate(rad)\n\n    let flipScale = 0\n    let flopScale = 0\n\n    // Flip/flop the canvas\n    if(flip) {\n        flipScale = -1 \n    } else {\n        flipScale = 1\n    }\n    if(flop) {\n        flopScale = flop\n        flipScale = flop\n    } else {\n         flopScale = 1\n    }\n    ctx.scale(flipScale, flopScale)\n\n    // Draw the image\n    ctx.drawImage(img, -width/2, -height/2, width, height)\n    ctx.restore()\n}\n\nlet timestamp = () => {\n    return new Date().getTime()\n}\n\nlet randomint = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst rad = (d) => {\n    return (Math.PI/180)*d\n}\n\nexport { rec, fsrect, contains, text, drawImage, overlaps, timestamp, randomint, rad, drawImage2 }","/**\n * SfxrParams\n *\n * Copyright 2010 Thomas Vian\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author Thomas Vian\n */\n/** @constructor */\n\nlet jsfxr = {}\n\nfunction SfxrParams() {\n    //--------------------------------------------------------------------------\n    //\n    //  Settings String Methods\n    //\n    //--------------------------------------------------------------------------\n  \n    /**\n     * Parses a settings array into the parameters\n     * @param array Array of the settings values, where elements 0 - 23 are\n     *                a: waveType\n     *                b: attackTime\n     *                c: sustainTime\n     *                d: sustainPunch\n     *                e: decayTime\n     *                f: startFrequency\n     *                g: minFrequency\n     *                h: slide\n     *                i: deltaSlide\n     *                j: vibratoDepth\n     *                k: vibratoSpeed\n     *                l: changeAmount\n     *                m: changeSpeed\n     *                n: squareDuty\n     *                o: dutySweep\n     *                p: repeatSpeed\n     *                q: phaserOffset\n     *                r: phaserSweep\n     *                s: lpFilterCutoff\n     *                t: lpFilterCutoffSweep\n     *                u: lpFilterResonance\n     *                v: hpFilterCutoff\n     *                w: hpFilterCutoffSweep\n     *                x: masterVolume\n     * @return If the string successfully parsed\n     */\n    this.setSettings = function(values)\n    {\n      for ( var i = 0; i < 24; i++ )\n      {\n        this[String.fromCharCode( 97 + i )] = values[i] || 0;\n      }\n  \n      // I moved this here from the reset(true) function\n      if (this['c'] < .01) {\n        this['c'] = .01;\n      }\n  \n      var totalTime = this['b'] + this['c'] + this['e'];\n      if (totalTime < .18) {\n        var multiplier = .18 / totalTime;\n        this['b']  *= multiplier;\n        this['c'] *= multiplier;\n        this['e']   *= multiplier;\n      }\n    }\n  }\n  \n  /**\n   * SfxrSynth\n   *\n   * Copyright 2010 Thomas Vian\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * @author Thomas Vian\n   */\n  /** @constructor */\n  function SfxrSynth() {\n    // All variables are kept alive through function closures\n  \n    //--------------------------------------------------------------------------\n    //\n    //  Sound Parameters\n    //\n    //--------------------------------------------------------------------------\n  \n    this._params = new SfxrParams();  // Params instance\n  \n    //--------------------------------------------------------------------------\n    //\n    //  Synth Variables\n    //\n    //--------------------------------------------------------------------------\n  \n    var _envelopeLength0, // Length of the attack stage\n        _envelopeLength1, // Length of the sustain stage\n        _envelopeLength2, // Length of the decay stage\n  \n        _period,          // Period of the wave\n        _maxPeriod,       // Maximum period before sound stops (from minFrequency)\n  \n        _slide,           // Note slide\n        _deltaSlide,      // Change in slide\n  \n        _changeAmount,    // Amount to change the note by\n        _changeTime,      // Counter for the note change\n        _changeLimit,     // Once the time reaches this limit, the note changes\n  \n        _squareDuty,      // Offset of center switching point in the square wave\n        _dutySweep;       // Amount to change the duty by\n  \n    //--------------------------------------------------------------------------\n    //\n    //  Synth Methods\n    //\n    //--------------------------------------------------------------------------\n  \n    /**\n     * Resets the runing variables from the params\n     * Used once at the start (total reset) and for the repeat effect (partial reset)\n     */\n    this.reset = function() {\n      // Shorter reference\n      var p = this._params;\n  \n      _period       = 100 / (p['f'] * p['f'] + .001);\n      _maxPeriod    = 100 / (p['g']   * p['g']   + .001);\n  \n      _slide        = 1 - p['h'] * p['h'] * p['h'] * .01;\n      _deltaSlide   = -p['i'] * p['i'] * p['i'] * .000001;\n  \n      if (!p['a']) {\n        _squareDuty = .5 - p['n'] / 2;\n        _dutySweep  = -p['o'] * .00005;\n      }\n  \n      _changeAmount =  1 + p['l'] * p['l'] * (p['l'] > 0 ? -.9 : 10);\n      _changeTime   = 0;\n      _changeLimit  = p['m'] == 1 ? 0 : (1 - p['m']) * (1 - p['m']) * 20000 + 32;\n    }\n  \n    // I split the reset() function into two functions for better readability\n    this.totalReset = function() {\n      this.reset();\n  \n      // Shorter reference\n      var p = this._params;\n  \n      // Calculating the length is all that remained here, everything else moved somewhere\n      _envelopeLength0 = p['b']  * p['b']  * 100000;\n      _envelopeLength1 = p['c'] * p['c'] * 100000;\n      _envelopeLength2 = p['e']   * p['e']   * 100000 + 12;\n      // Full length of the volume envelop (and therefore sound)\n      // Make sure the length can be divided by 3 so we will not need the padding \"==\" after base64 encode\n      return ((_envelopeLength0 + _envelopeLength1 + _envelopeLength2) / 3 | 0) * 3;\n    }\n  \n    /**\n     * Writes the wave to the supplied buffer ByteArray\n     * @param buffer A ByteArray to write the wave to\n     * @return If the wave is finished\n     */\n    this.synthWave = function(buffer, length) {\n      // Shorter reference\n      var p = this._params;\n  \n      // If the filters are active\n      var _filters = p['s'] != 1 || p['v'],\n          // Cutoff multiplier which adjusts the amount the wave position can move\n          _hpFilterCutoff = p['v'] * p['v'] * .1,\n          // Speed of the high-pass cutoff multiplier\n          _hpFilterDeltaCutoff = 1 + p['w'] * .0003,\n          // Cutoff multiplier which adjusts the amount the wave position can move\n          _lpFilterCutoff = p['s'] * p['s'] * p['s'] * .1,\n          // Speed of the low-pass cutoff multiplier\n          _lpFilterDeltaCutoff = 1 + p['t'] * .0001,\n          // If the low pass filter is active\n          _lpFilterOn = p['s'] != 1,\n          // masterVolume * masterVolume (for quick calculations)\n          _masterVolume = p['x'] * p['x'],\n          // Minimum frequency before stopping\n          _minFreqency = p['g'],\n          // If the phaser is active\n          _phaser = p['q'] || p['r'],\n          // Change in phase offset\n          _phaserDeltaOffset = p['r'] * p['r'] * p['r'] * .2,\n          // Phase offset for phaser effect\n          _phaserOffset = p['q'] * p['q'] * (p['q'] < 0 ? -1020 : 1020),\n          // Once the time reaches this limit, some of the    iables are reset\n          _repeatLimit = p['p'] ? ((1 - p['p']) * (1 - p['p']) * 20000 | 0) + 32 : 0,\n          // The punch factor (louder at begining of sustain)\n          _sustainPunch = p['d'],\n          // Amount to change the period of the wave by at the peak of the vibrato wave\n          _vibratoAmplitude = p['j'] / 2,\n          // Speed at which the vibrato phase moves\n          _vibratoSpeed = p['k'] * p['k'] * .01,\n          // The type of wave to generate\n          _waveType = p['a'];\n  \n      var _envelopeLength      = _envelopeLength0,     // Length of the current envelope stage\n          _envelopeOverLength0 = 1 / _envelopeLength0, // (for quick calculations)\n          _envelopeOverLength1 = 1 / _envelopeLength1, // (for quick calculations)\n          _envelopeOverLength2 = 1 / _envelopeLength2; // (for quick calculations)\n  \n      // Damping muliplier which restricts how fast the wave position can move\n      var _lpFilterDamping = 5 / (1 + p['u'] * p['u'] * 20) * (.01 + _lpFilterCutoff);\n      if (_lpFilterDamping > .8) {\n        _lpFilterDamping = .8;\n      }\n      _lpFilterDamping = 1 - _lpFilterDamping;\n  \n      var _finished = false,     // If the sound has finished\n          _envelopeStage    = 0, // Current stage of the envelope (attack, sustain, decay, end)\n          _envelopeTime     = 0, // Current time through current enelope stage\n          _envelopeVolume   = 0, // Current volume of the envelope\n          _hpFilterPos      = 0, // Adjusted wave position after high-pass filter\n          _lpFilterDeltaPos = 0, // Change in low-pass wave position, as allowed by the cutoff and damping\n          _lpFilterOldPos,       // Previous low-pass wave position\n          _lpFilterPos      = 0, // Adjusted wave position after low-pass filter\n          _periodTemp,           // Period modified by vibrato\n          _phase            = 0, // Phase through the wave\n          _phaserInt,            // Integer phaser offset, for bit maths\n          _phaserPos        = 0, // Position through the phaser buffer\n          _pos,                  // Phase expresed as a Number from 0-1, used for fast sin approx\n          _repeatTime       = 0, // Counter for the repeats\n          _sample,               // Sub-sample calculated 8 times per actual sample, averaged out to get the super sample\n          _superSample,          // Actual sample writen to the wave\n          _vibratoPhase     = 0; // Phase through the vibrato sine wave\n  \n      // Buffer of wave values used to create the out of phase second wave\n      var _phaserBuffer = new Array(1024),\n          // Buffer of random values used to generate noise\n          _noiseBuffer  = new Array(32);\n      for (var i = _phaserBuffer.length; i--; ) {\n        _phaserBuffer[i] = 0;\n      }\n      for (var i = _noiseBuffer.length; i--; ) {\n        _noiseBuffer[i] = Math.random() * 2 - 1;\n      }\n  \n      for (var i = 0; i < length; i++) {\n        if (_finished) {\n          return i;\n        }\n  \n        // Repeats every _repeatLimit times, partially resetting the sound parameters\n        if (_repeatLimit) {\n          if (++_repeatTime >= _repeatLimit) {\n            _repeatTime = 0;\n            this.reset();\n          }\n        }\n  \n        // If _changeLimit is reached, shifts the pitch\n        if (_changeLimit) {\n          if (++_changeTime >= _changeLimit) {\n            _changeLimit = 0;\n            _period *= _changeAmount;\n          }\n        }\n  \n        // Acccelerate and apply slide\n        _slide += _deltaSlide;\n        _period *= _slide;\n  \n        // Checks for frequency getting too low, and stops the sound if a minFrequency was set\n        if (_period > _maxPeriod) {\n          _period = _maxPeriod;\n          if (_minFreqency > 0) {\n            _finished = true;\n          }\n        }\n  \n        _periodTemp = _period;\n  \n        // Applies the vibrato effect\n        if (_vibratoAmplitude > 0) {\n          _vibratoPhase += _vibratoSpeed;\n          _periodTemp *= 1 + Math.sin(_vibratoPhase) * _vibratoAmplitude;\n        }\n  \n        _periodTemp |= 0;\n        if (_periodTemp < 8) {\n          _periodTemp = 8;\n        }\n  \n        // Sweeps the square duty\n        if (!_waveType) {\n          _squareDuty += _dutySweep;\n          if (_squareDuty < 0) {\n            _squareDuty = 0;\n          } else if (_squareDuty > .5) {\n            _squareDuty = .5;\n          }\n        }\n  \n        // Moves through the different stages of the volume envelope\n        if (++_envelopeTime > _envelopeLength) {\n          _envelopeTime = 0;\n  \n          switch (++_envelopeStage)  {\n            case 1:\n              _envelopeLength = _envelopeLength1;\n              break;\n            case 2:\n              _envelopeLength = _envelopeLength2;\n          }\n        }\n  \n        // Sets the volume based on the position in the envelope\n        switch (_envelopeStage) {\n          case 0:\n            _envelopeVolume = _envelopeTime * _envelopeOverLength0;\n            break;\n          case 1:\n            _envelopeVolume = 1 + (1 - _envelopeTime * _envelopeOverLength1) * 2 * _sustainPunch;\n            break;\n          case 2:\n            _envelopeVolume = 1 - _envelopeTime * _envelopeOverLength2;\n            break;\n          case 3:\n            _envelopeVolume = 0;\n            _finished = true;\n        }\n  \n        // Moves the phaser offset\n        if (_phaser) {\n          _phaserOffset += _phaserDeltaOffset;\n          _phaserInt = _phaserOffset | 0;\n          if (_phaserInt < 0) {\n            _phaserInt = -_phaserInt;\n          } else if (_phaserInt > 1023) {\n            _phaserInt = 1023;\n          }\n        }\n  \n        // Moves the high-pass filter cutoff\n        if (_filters && _hpFilterDeltaCutoff) {\n          _hpFilterCutoff *= _hpFilterDeltaCutoff;\n          if (_hpFilterCutoff < .00001) {\n            _hpFilterCutoff = .00001;\n          } else if (_hpFilterCutoff > .1) {\n            _hpFilterCutoff = .1;\n          }\n        }\n  \n        _superSample = 0;\n        for (var j = 8; j--; ) {\n          // Cycles through the period\n          _phase++;\n          if (_phase >= _periodTemp) {\n            _phase %= _periodTemp;\n  \n            // Generates new random noise for this period\n            if (_waveType == 3) {\n              for (var n = _noiseBuffer.length; n--; ) {\n                _noiseBuffer[n] = Math.random() * 2 - 1;\n              }\n            }\n          }\n  \n          // Gets the sample from the oscillator\n          switch (_waveType) {\n            case 0: // Square wave\n              _sample = ((_phase / _periodTemp) < _squareDuty) ? .5 : -.5;\n              break;\n            case 1: // Saw wave\n              _sample = 1 - _phase / _periodTemp * 2;\n              break;\n            case 2: // Sine wave (fast and accurate approx)\n              _pos = _phase / _periodTemp;\n              _pos = (_pos > .5 ? _pos - 1 : _pos) * 6.28318531;\n              _sample = 1.27323954 * _pos + .405284735 * _pos * _pos * (_pos < 0 ? 1 : -1);\n              _sample = .225 * ((_sample < 0 ? -1 : 1) * _sample * _sample  - _sample) + _sample;\n              break;\n            case 3: // Noise\n              _sample = _noiseBuffer[Math.abs(_phase * 32 / _periodTemp | 0)];\n          }\n  \n          // Applies the low and high pass filters\n          if (_filters) {\n            _lpFilterOldPos = _lpFilterPos;\n            _lpFilterCutoff *= _lpFilterDeltaCutoff;\n            if (_lpFilterCutoff < 0) {\n              _lpFilterCutoff = 0;\n            } else if (_lpFilterCutoff > .1) {\n              _lpFilterCutoff = .1;\n            }\n  \n            if (_lpFilterOn) {\n              _lpFilterDeltaPos += (_sample - _lpFilterPos) * _lpFilterCutoff;\n              _lpFilterDeltaPos *= _lpFilterDamping;\n            } else {\n              _lpFilterPos = _sample;\n              _lpFilterDeltaPos = 0;\n            }\n  \n            _lpFilterPos += _lpFilterDeltaPos;\n  \n            _hpFilterPos += _lpFilterPos - _lpFilterOldPos;\n            _hpFilterPos *= 1 - _hpFilterCutoff;\n            _sample = _hpFilterPos;\n          }\n  \n          // Applies the phaser effect\n          if (_phaser) {\n            _phaserBuffer[_phaserPos % 1024] = _sample;\n            _sample += _phaserBuffer[(_phaserPos - _phaserInt + 1024) % 1024];\n            _phaserPos++;\n          }\n  \n          _superSample += _sample;\n        }\n  \n        // Averages out the super samples and applies volumes\n        _superSample *= .125 * _envelopeVolume * _masterVolume;\n  \n        // Clipping if too loud\n        buffer[i] = _superSample >= 1 ? 32767 : _superSample <= -1 ? -32768 : _superSample * 32767 | 0;\n      }\n  \n      return length;\n    }\n  }\n  \n  // Adapted from http://codebase.es/riffwave/\n  var synth = new SfxrSynth();\n  // Export for the Closure Compiler\n  jsfxr = function(settings) {\n    // Initialize SfxrParams\n    synth._params.setSettings(settings);\n    // Synthesize Wave\n    var envelopeFullLength = synth.totalReset();\n    var data = new Uint8Array(((envelopeFullLength + 1) / 2 | 0) * 4 + 44);\n    var used = synth.synthWave(new Uint16Array(data.buffer, 44), envelopeFullLength) * 2;\n    var dv = new Uint32Array(data.buffer, 0, 44);\n    // Initialize header\n    dv[0] = 0x46464952; // \"RIFF\"\n    dv[1] = used + 36;  // put total size here\n    dv[2] = 0x45564157; // \"WAVE\"\n    dv[3] = 0x20746D66; // \"fmt \"\n    dv[4] = 0x00000010; // size of the following\n    dv[5] = 0x00010001; // Mono: 1 channel, PCM format\n    dv[6] = 0x0000AC44; // 44,100 samples per second\n    dv[7] = 0x00015888; // byte rate: two bytes per sample\n    dv[8] = 0x00100002; // 16 bits per sample, aligned on every two bytes\n    dv[9] = 0x61746164; // \"data\"\n    dv[10] = used;      // put number of samples here\n  \n    // Base64 encoding written by me, @maettig\n    used += 44;\n    var i = 0,\n        base64Characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n        output = 'data:audio/wav;base64,';\n    for (; i < used; i += 3)\n    {\n      var a = data[i] << 16 | data[i + 1] << 8 | data[i + 2];\n      output += base64Characters[a >> 18] + base64Characters[a >> 12 & 63] + base64Characters[a >> 6 & 63] + base64Characters[a & 63];\n    }\n    return output;\n  }\n\nconst sounds = [\n    // blip\n    [0,,0.1344,,0.195,0.4999,,,,,,,,0.4824,,,,,1,,,0.1,,0.5],\n    \n    // beep beep\n    [0,,0.654,0.3615,0.7695,0.2925,,-0.015,,,,0.046,,0.223,0.539,,-0.3229,,1,,,,0.2159,0.5],\n    \n    // thump\n    [3,,0.3696,0.2535,0.4037,0.0999,,-0.0134,,,,,,,,0.4544,0.2196,-0.1392,1,,,,,0.5],\n    [3,,0.2579,0.3189,0.3249,0.0597,,0.1712,,,,-0.2342,0.6582,,,0.4716,-0.2343,-0.1203,1,,,,,0.5],\n    [3,,0.3455,0.514,0.3441,0.1119,,0.0362,,,,,,,,,,,1,,,,,0.5],\n\n    // drink\n    [0,,0.3403,,0.3456,0.25,,0.0916,,,,,,0.137,,,,,1,,,,,0.5],\n    [0,,0.3403,,0.3184,0.2172,0.0192,0.0916,,,,0.0409,0.0441,0.1705,0.01,0.0017,-0.0489,,1,-0.0258,0.0765,,,0.5],\n\n    // drop glass\n    [1,,0.0571,,0.466,0.3898,,0.1875,,0.6209,0.5363,,,,,,,,1,,,,,0.5],\n\n    // chomp\n    [3,,0.1384,0.5,0.2465,0.5615,,-0.615,0.046,0.177,,,,0.5771,,,-0.015,,1,,,0.0472,,0.5]\n]\n\nlet playsound = (index) => {\n    const player = new Audio()\n    player.src = jsfxr(sounds[index])\n    player.play()\n}\n\nexport { playsound }\n","import { drawImage, timestamp } from './util.js'\nimport { playsound } from './sound.js';\n\nclass Head {\n    constructor(x,y,c) {\n        this.x = x\n        this.y = y\n        this.c = c\n\n        this.busy = false\n        this.eyesclosed = false\n\n        this.eyes = {\n            x: this.x + 128,\n            y: this.y + 187,\n            moving: true,\n            tx: this.x + 118,\n            ty: this.y + 197,\n            timer: timestamp()\n        }\n\n        this.bob = 0\n        this.inc = 1\n        this.count = 0\n        \n        this.chomping = false\n        this.chompInc = 2\n        this.chompOffset = 0\n    }\n\n    render(c) {\n        // open mouth\n        c.drawImage(this.c[12], this.x + 71, this.y + 245 + this.bob + this.chompOffset)\n        // top teeth\n        c.drawImage(this.c[29], this.x + 181, this.y + 335 + this.bob)\n        // head\n        c.drawImage(this.c[4], this.x, this.y + this.bob)\n\n        // hide mouth\n        if(!this.chomping) {\n            c.fillStyle = '#ffd5d5'\n            c.fillRect(this.x + 120, this.y + 345 + this.bob, 220, 60)\n        }\n\n        // eyes\n        if(!this.eyesclosed) {\n            // left\n            c.drawImage(this.c[0], this.x + 108, this.y + 167 + this.bob)\n            // pupil\n            c.drawImage(this.c[8], this.eyes.x, this.eyes.y + this.bob)\n        } else {\n            drawImage(c, this.c[1], this.x + 108, this.y + 167 + this.bob, this.c[1].height, this.c[1].width, 0, true)\n        }\n        if(!this.eyesclosed) {\n            // right\n            c.drawImage(this.c[0], this.x + 258, this.y + 167 + this.bob)\n            // pupil\n            c.drawImage(this.c[8], this.eyes.x + 150, this.eyes.y + this.bob)\n        } else {\n            c.drawImage(this.c[1], this.x + 258, this.y + 167 + this.bob)\n        }\n        // nose\n        c.drawImage(this.c[3], this.x + 150, this.y + 217 + this.bob)\n        // mouth\n        if(!this.chomping) {\n            c.drawImage(this.c[9], this.x + 125, this.y + 360 + this.bob)\n        }\n        // hair\n        // left\n        c.drawImage(this.c[7], this.x + 53, this.y + 81 + this.bob)\n        // right\n        c.drawImage(this.c[7], this.x + 363, this.y + 81 + this.bob)\n        // eyebrows\n        // left\n        c.drawImage(this.c[6], this.x + 100, this.y + 100 + this.bob)\n        // right\n        c.drawImage(this.c[6], this.x + 255, this.y + 100 + this.bob)\n\n        /*\n        c.strokeStyle = 'blue'\n        c.beginPath()\n        c.rect(this.x + 125, this.y + 355 + this.bob, 220, 65)\n        c.stroke()*/\n    }\n\n    update(global) {\n        global.grabthese.forEach(g => {\n            if(this.checkHover(g)) {\n                if(!g.isExhausted()) {\n                    if(!g.isInAction()) {\n                        g.startAction()\n                    }\n                    if(g.chomp && !g.busy) {\n                        g.chompIt()\n                        playsound(8)\n                        this.chomping = true\n                    }\n                    this.busy = true\n                    if(g.closeEyes) {\n                        this.closeEyes()\n                    }\n                } else {\n                    if(g.isInAction()) {\n                        g.endAction()\n                    }\n                    this.chomping = false\n                    this.chompOffset = 0\n                    this.busy = false\n                    if(g.closeEyes) {\n                        this.openEyes()\n                    }\n                }\n            } else {\n                if(g.isInAction()) {\n                    g.endAction()\n                }\n                this.busy = false\n                this.openEyes()\n            }\n        })\n        if(!this.eyesclosed) {\n            this.updateEyes()\n        }\n\n        if(this.count > 8) {\n            this.count = 0\n            this.bob += this.inc\n            if(this.bob > 5 || this.bob < -5) {\n                this.inc *= -1\n            }\n        }\n        this.count++\n\n        if(this.chomping) {\n            this.chompOffset += this.chompInc\n        }\n        if(this.chompOffset > 50 || this.chompOffset < -20) {\n            this.chompInc *= -1\n        }\n    }\n\n    checkHover(g) {\n        return g.checkHover(this.x + 125, this.y + 355 + this.bob, 220, 65)\n    }\n\n    closeEyes() {\n        this.eyesclosed = true\n    }\n\n    openEyes() {\n        this.eyesclosed = false\n    }\n\n    updateEyes() {\n        let now = timestamp()\n        if ( this.eyes.moving ) {\n\n            if ( this.eyes.x < this.eyes.tx ) {\n                this.eyes.x++;\n            }\n            if ( this.eyes.x > this.eyes.tx ) {\n                this.eyes.x--;\n            }\n            if ( this.eyes.y < this.eyes.ty ) {\n                this.eyes.y++;\n            }\n            if ( this.eyes.y > this.eyes.ty ) {\n                this.eyes.y--;\n            }\n            if ( this.eyes.x === this.eyes.tx && this.eyes.y === this.eyes.ty ) {\n                this.eyes.moving = false;\n            }\n        } else {\n            if ( now - this.eyes.timer > 2000) {\n                const radius = 14;\n                const angle = Math.random() * Math.PI * 2;\n                const nx = Math.floor(Math.cos(angle) * radius);\n                const ny = Math.floor(Math.sin(angle) * radius);\n\n                this.eyes.tx = this.x + nx + 128;\n                this.eyes.ty = this.y + ny + 187;\n\n                this.eyes.moving = true;\n                this.eyes.timer = timestamp()\n            }\n        }\n    }\n}\n\nexport default Head","import { playsound } from './sound.js'\n\n// this allows a thing to grab other things\nclass Grabber {\n    constructor(x, y, c, imageindex, grabwidth, grabheight, offsetX, offsetY) {\n        this.x = x\n        this.y = y\n        this.c = c\n\n        this.target = null\n\n        let i = this.c[imageindex]\n\n        this.iw = Math.floor(i.width / 2) + offsetX\n        this.ih = Math.floor(i.height / 2) + offsetY\n        this.oX = Math.floor(this.iw - grabwidth / 2)\n        this.oY = Math.floor(this.ih - grabheight / 2)\n        \n        this.gx = this.x + this.oX\n        this.gy = this.y + this.oY\n        this.gw = grabwidth\n        this.gh = grabheight\n    }\n\n    update() {\n        if(this.x < -100) {\n            this.x = -100;\n        }\n        if(this.x > 1200) {\n            this.x = 1200;\n        }\n        if(this.y < -100) {\n            this.y = -100;\n        }\n        if(this.y > 650) {\n            this.y = 650;\n        }\n\n        // update the grab offset\n        this.gx = this.x + this.oX\n        this.gy = this.y + this.oY\n        this.moveGrab()\n    }\n\n    grabThing(target, flip) {\n        if(!this.target) {\n            if(target.checkGrab(this.gx, this.gy, this.gw, this.gh)) {\n                playsound(0)\n                this.target = target\n                if(!flip) {\n                    this.target.flipIt()\n                }\n            }\n        }\n    }\n\n    moveGrab() {\n        if(this.target) {\n            this.target.moveGrab(this.gx, this.gy)\n\n            if((this.target.isExhausted() || this.target.canBeChucked())&& this.target.gy < 80) {\n                this.target.releaseAction()\n                this.target = null\n            }\n        }\n    }\n}\n\nexport default Grabber","import { overlaps, drawImage } from './util.js'\nimport Grabber from './grabber.js'\n\nclass Hand extends Grabber {\n    constructor(x, y, c, flip) {\n        // center grabber, image 11, size is 30x30\n        super(x,y,c, 2, 30, 30, 0, 20)\n\n        this.imageIndex = 2\n        this.w = this.c[2].width\n        this.h = this.c[2].height\n        this.angle = 90\n        this.flip = flip\n        if(flip) {\n            this.angle = -90\n        }\n\n        this.hbx = this.x\n        this.hby = this.y\n        this.hbw = this.c[2].height\n        this.hbh = this.c[2].width\n\n        this.downCount = 0\n    }\n\n    render(c) {\n        if(this.target) {\n            this.target.render(c, true)\n        }\n        drawImage(c,this.c[2], this.x, this.y, this.w, this.h, this.angle, this.flip)\n        // render the grabber hitpoint\n        //c.fillStyle = 'blue'\n        //c.fillRect(this.gx, this.gy, this.gw, this.gh)\n\n        /*\n        c.strokeStyle = 'red'\n        c.beginPath()\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh)\n        c.stroke()\n        */\n    }\n\n    update(global) {\n        super.update()\n        this.hbx = this.x + 50\n        this.hby = this.y - 50\n\n        if(!this.target) {\n            global.grabthese.forEach(g => {\n                this.grabThing(g, this.flip)\n            })\n        }\n        if(this.target && this.target.dead) {\n            this.target.grabbed = false\n            this.target.reset()\n            this.target = null\n        }\n    }\n\n    set(mx,my, multi) {\n        if(my > this.y) {\n            this.downCount += Math.abs((this.y - my))\n        } else {\n            this.downCount = 0\n        }\n        this.downCount *= multi\n        this.y = my\n        this.x = mx\n\n        this.hbx = this.x + 50\n        this.hby = this.y - 50\n    }\n\n    move(incX, incY, multi) {\n        if(incX !== null) {\n            this.x += incX\n        }\n        if(incY !== null) {\n            this.oldy = this.y\n            this.y += incY\n\n            if(this.y > this.oldy) {\n                this.downCount += Math.abs((this.y - this.oldy))\n            } else {\n                this.downCount = 0\n            }\n            // for keyboard controls\n            if(multi) {\n                this.downCount *= multi\n            }\n        }\n    }\n\n    collideWith(list) {\n        for(let i = 0; i < list.length; i++) {\n            if(!list[i].grabbed) {\n                if(overlaps(this.hbx, this.hby, this.hbw, this.hbh,\n                            list[i].hbx, list[i].hby, list[i].hbw, list[i].hbh\n                ) > 1.0) {\n                    return { 'r': true, 'c': this.downCount, 'o': list[i] }\n                }\n            }\n        }\n        return { 'r': false }\n    }\n\n    push(list) {\n        let result = false\n        list.forEach(l => {\n            if(l.collide(this.hbx, this.hby, this.hbw, this.hbh)) {\n                result = true\n            }\n        })\n        return result\n    }\n}\n\nexport default Hand\n","import Head from './head.js'\nimport { drawImage } from './util.js'\nimport Hand from './hand.js'\n\nclass Giant {\n    constructor(x,y,c) {\n        this.x = x\n        this.y = y\n        this.c = c\n        //428, 385\n        //469, 22\n        this.head = new Head(x + 51, y - 363, c)\n        this.fw = this.c[2].width\n        this.fh = this.c[2].height\n\n        this.lefthand = new Hand(this.x - 300, this.y + 180, c, false)\n        this.righthand = new Hand(this.x + 600, this.y + 180, c, true)\n\n        this.bob = 0\n        this.inc = -1\n        this.count = 2\n    }\n\n    render(c) {\n        // body\n        c.drawImage(this.c[5], this.x, this.y + this.bob)\n        this.head.render(c)\n        // hands\n        \n        // left\n        //drawImage(c,this.c.imgs[2], this.x - 300, this.y + 150, this.fw, this.fh, 90)\n        \n        // right\n        //drawImage(c,this.c.imgs[2], this.x + 600, this.y + 90, this.fw, this.fh, -90, true)\n        this.lefthand.render(c)\n        this.righthand.render(c)\n    }\n\n    update(global) {\n        this.head.update(global)\n        this.lefthand.update(global)\n        this.righthand.update(global)\n\n        if(this.count > 8) {\n            this.count = 0\n            this.bob += this.inc\n            if(this.bob > 5 || this.bob < -5) {\n                this.inc *= -1\n            }\n        }\n        this.count++\n    }\n\n    moveLeft(dx, dy) {\n        this.lefthand.move(dx, dy)\n    }\n\n    moveRight(dx, dy) {\n        this.righthand.move(dx, dy)\n    }\n\n    /* (handleMove(x,y) {\n        this.righthand.x = x\n        this.righthand.y = y\n    } */\n}\n\nexport default Giant","import { overlaps } from './util.js'\n\n// this allows a thing to be grabbed and also triggers when held over a hoverpoint\nclass Grabbable {\n    constructor(x, y, c, imageindex, grabwidth, grabheight, percentage, offsetX, offsetY, hoverX, hoverY, hoverWidth, hoverHeight, name) {\n        this.x = x\n        this.y = y\n        this.c = c\n        this.percentage = percentage\n\n        this.grabbed = false\n\n        let i = this.c[imageindex]\n\n        this.iw = Math.floor(i.width / 2) + offsetX\n        this.ih = Math.floor(i.height / 2) + offsetY\n        this.oX = Math.floor(this.iw - grabwidth / 2)\n        this.oY = Math.floor(this.ih - grabheight / 2)\n        \n        this.gx = this.x + this.oX\n        this.gy = this.y + this.oY\n        this.gw = grabwidth\n        this.gh = grabheight\n\n        // hover target is just a box\n        this.hox = hoverX\n        this.hoy = hoverY\n        this.hx = this.x + this.hox\n        this.hy = this.y + this.hoy\n        this.hw = hoverWidth\n        this.hh = hoverHeight\n\n        this.dead = false\n        this.name = name\n    }\n\n    update() {\n        // update the grab offset\n        this.gx = this.x + this.oX\n        this.gy = this.y + this.oY\n        this.hx = this.x + this.hox\n        this.hy = this.y + this.hoy\n    }\n\n    checkGrab(px, py, w, h) {\n        if(!this.grabbed && !this.dead) {\n            let p = overlaps(px, py, w, h, this.gx, this.gy, this.gw, this.gh)\n            if(p >= this.percentage) {\n                this.grabbed = true\n                return true\n            }\n        }\n        return false\n    }\n\n    moveGrab(cx, cy) {\n        // center the grabbed item on the provided point\n        if(this.grabbed) {\n            this.x = cx - this.iw\n            this.y = cy - this.ih\n            this.gx = this.x + this.oX\n            this.gy = this.y + this.oY\n            this.hx = this.x + this.hox\n            this.hy = this.y + this.hoy\n        }\n    }\n\n    checkHover(px, py, w, h) {\n        if(this.grabbed) {\n            let p = overlaps(px, py, w, h, this.hx, this.hy, this.hw, this.hh)\n            if(p >= this.percentage) {\n                return true\n            }\n        }\n        return false\n    }\n\n    isExhausted() {\n        return false\n    }\n\n    canBeChucked() {\n        return false\n    }\n\n    isInAction() {\n        return false\n    }\n\n    startAction() {\n    }\n\n    endAction() {\n    }\n\n    releaseAction() {\n    }\n\n    flipIt() {\n        \n    }\n\n    sendDead() {\n        this.sendEvent('d')\n    }\n\n    sendEvent(t) {\n        const e = new CustomEvent('s', { detail: { 'n': this.name, 't': t}})\n        window.dispatchEvent(e)\n    }\n    sendEaten() {\n        this.sendEvent('e')\n    }\n    sendEaten2() {\n        this.sendEvent(null)\n    }\n}\n\nexport default Grabbable","import { timestamp, randomint, drawImage } from './util.js'\nimport Grabbable from './grab.js'\nimport { playsound } from './sound.js'\n\nconst STATE = {\n    STANDING: 0,\n    HELD: 1,\n    DRINKING: 2,\n    EMPTY: 3,\n    FALLING: 4\n}\n\nclass Beer extends Grabbable {\n    constructor(x,y,c) {\n        // center grabber, image 14, size is 30x30, 25% overlap\n        // hover target\n        super(x,y,c, 13, 60, 200, 2.0, 120, 20,  0, 60, 200, 80, 'beers')\n\n        this.state = STATE.STANDING\n        this.energy = 100\n        this.ts = timestamp()\n        this.closeEyes = true\n        this.chomp = false\n\n        this.hbx = this.x\n        this.hby = this.y\n        this.hbw = this.c[13].width\n        this.hbh = this.c[13].height\n        this.flip = false\n    }\n\n    render(c, override) {\n        if(this.x > 1366) {\n            return\n        }\n        // render the hitbox\n        /*\n        c.strokeStyle = 'red';\n        c.beginPath();\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh);\n        c.stroke();*/\n        \n\n        let i = 13\n        switch(this.state) {\n            case STATE.DRINKING:\n                i = 14\n                break\n            case STATE.FALLING:\n            case STATE.EMPTY:\n                i = 15\n                break\n        }\n        let fx = 0\n        if(this.flip) {\n            fx = 300\n            this.hx = this.x + this.hox + 400\n        }\n\n        if(this.isFalling()) {\n            //c.drawImage(this.c[i], this.x, this.y)\n            drawImage(c, this.c[i], this.x + fx, this.y, this.c[i].width, this.c[i].height, 0, this.flip)\n            return\n        }\n\n        // don't render it if grabbed, let the grabber render it using override\n        if(!this.grabbed || override) {\n            drawImage(c, this.c[i], this.x + fx, this.y, this.c[i].width, this.c[i].height, 0, this.flip)\n        }\n        // render the grabber hitpoint\n        /*\n        c.fillStyle = 'red'\n        c.fillRect(this.gx, this.gy, this.gw, this.gh)\n\n        if(this.isInAction()) {\n            c.fillStyle = 'black'\n        } else {\n            c.fillStyle = 'orange'\n        }\n        c.fillRect(this.hx, this.hy, this.hw, this.hh)\n        */\n    }\n\n    update() {\n        super.update()\n\n        this.hbx = this.x;\n        this.hby = this.y;\n\n        if(this.state === STATE.DRINKING) {\n            let t = timestamp()\n            if(t >= this.ts) {\n                this.ts = timestamp() + 300\n                if(this.energy > 0) {\n                    this.energy -= 10\n                    playsound(randomint(5,6))\n                }\n            }\n        }\n        if(this.isFalling() && this.y < 1400) {\n            this.y += 20;\n        }\n        if((this.isFalling() && this.y >= 1400) || \n            (this.state === STATE.STANDING && this.x < -400)) {\n            this.reset()\n        }\n    }\n\n    reset() {\n        this.x = 3000 + randomint(200, 300)\n        this.y = 317 - 86\n        this.state = STATE.STANDING\n        this.energy = 100;\n        this.ts = timestamp()\n        this.grabbed = false\n        this.flip = false\n        this.sendEaten2()\n    }\n\n    isFalling() {\n        return this.state === STATE.FALLING\n    }\n\n    isInAction() {\n        return this.state === STATE.DRINKING\n    }\n\n    startAction() {\n        if(this.grabbed && this.energy > 0) {\n            this.ts = timestamp() + 300\n            this.state = STATE.DRINKING\n        }\n    }\n\n    endAction() {\n        if(this.grabbed) {\n            if(this.energy > 0) {\n                this.state = STATE.HELD\n            } else {\n                this.state = STATE.EMPTY\n            }\n        }\n    }\n\n    isExhausted() {\n        //console.log(this.energy)\n        return this.energy <= 0\n    }\n\n    releaseAction() {\n        this.state = STATE.FALLING\n        playsound(7)\n    }\n\n    flipIt() {\n        this.flip = true\n    }\n}\n\nexport default Beer","import Grabbable from \"./grab\"\nimport { timestamp, drawImage, randomint } from \"./util\"\n\nconst STATE = {\n    STANDING: 0,\n    FULL: 1,\n    HALF: 2,\n    BITLEFT: 3,\n    DONE: 4\n}\n\nclass Sausage extends Grabbable{\n    constructor(x, y, c) {\n        super(x,y,c, 28, 60, 200, 2.0, 50, 20,  30, 30, 140, 110, 'sausages')\n\n        this.state = STATE.STANDING\n        this.closeEyes = false\n        this.chomp = true\n        \n        this.hbx = this.x\n        this.hby = this.y\n        this.hbw = this.c[28].width\n        this.hbh = this.c[28].height\n\n        this.busy = false\n        this.ts = timestamp()\n        this.flip = false\n    }\n\n    render(c, override) {\n        /*if(this.x > 1366 || this.state === STATE.DONE) {\n            return\n        }*/\n        // render the hitbox\n        \n        /*c.strokeStyle = 'red'\n        c.beginPath()\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh)\n        c.stroke()*/\n        \n        let i = 28\n        let rot = 0\n        let fx = 0\n        \n        switch(this.state) {\n            case STATE.HALF:\n                i = 27\n                break\n            case STATE.BITLEFT:\n                i = 26\n                rot = 20\n                break\n        }\n        if(this.flip) {\n            // shift the sprite, last piece rotation and the hover hitbox\n            fx = 150\n            this.hx = this.x + this.hox + 150\n            rot *= -1\n        }\n\n        // don't render it if grabbed, let the grabber render it using override\n        if(!this.grabbed || override) {\n            drawImage(c, this.c[i], this.x + fx, this.y, this.c[i].width, this.c[i].height, rot, this.flip)\n        }\n\n        // render the grabber hitpoint\n        \n        /*c.fillStyle = 'red'\n        c.fillRect(this.gx, this.gy, this.gw, this.gh)\n        \n        // hover point\n        c.fillStyle = 'orange'\n        c.fillRect(this.hx, this.hy, this.hw, this.hh)\n        */\n    }\n\n    update() {\n        super.update()\n        this.hbx = this.x\n        this.hby = this.y\n\n        if(timestamp() > this.ts) {\n            this.busy = false\n        }\n        if(this.isExhausted()) {\n            this.reset()\n        }\n    }\n\n    reset() {\n        this.x = 2300 + randomint(200, 300)\n        this.y = 317 - 86\n        this.hbx = this.x\n        this.hby = this.y\n        this.state = STATE.STANDING\n        this.dead = false\n        this.busy = false\n        this.flip = false\n        this.sendEaten2()\n    }\n\n    isInAction() {\n        return this.state !== STATE.STANDING\n    }\n\n    startAction() {\n        if(this.grabbed) {\n            if(this.state === STATE.STANDING) {\n                this.state = STATE.FULL\n            }\n        }\n    }\n\n    isExhausted() {\n        return this.state === STATE.DONE\n    }\n\n    releaseAction() {\n        this.state = STATE.DONE\n    }\n\n    chompIt() {\n        this.busy = true\n        switch(this.state) {\n            case STATE.FULL:\n                this.state = STATE.HALF\n            break\n            case STATE.HALF:\n                this.state = STATE.BITLEFT\n            break\n            case STATE.BITLEFT:\n                this.state = STATE.DONE\n                this.dead = true\n            break\n        }\n        this.ts = timestamp() + 500\n    }\n\n    flipIt() {\n        this.flip = true\n    }\n}\n\nexport default Sausage","import { playsound } from './sound.js'\nimport { drawImage, overlaps, rad, timestamp } from './util.js'\n\nclass Van {\n    constructor(x, y, config) {\n        this.x = x\n        this.y = y\n        this.c = config\n\n        this.ismoving = true\n        this.hasbeeped = false\n        this.gameover = false\n\n        this.rot = 0\n        this.bob = 0\n        this.inc = 1\n        this.count = 0\n\n        this.hbx = this.x + this.c[19].width - 30\n        this.hby = this.y\n        this.hbw = 30\n        this.hbh = this.c[13].height\n\n        this.showclock = false\n        this.cend = 0\n        this.ccols = [ '#0f0', '#ff0','#ffa500', '#f00', '#000']\n        this.cindex = 0\n        this.cinc = 1\n        this.tinc = Math.floor(5000 / 360)\n        this.cts = timestamp()\n    }\n\n    drawPieSlice(ctx,centerX, centerY, radius, startAngle, endAngle, color ){\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(centerX,centerY);\n        ctx.arc(centerX, centerY, radius, startAngle, endAngle);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    render(c) {\n        // draw the van\n        c.drawImage(this.c[19], this.x, this.y - this.bob)\n        // and the wheels\n        // front\n        drawImage(c, this.c[20], this.x + 131, this.y + 78, 44, 44, this.rot)\n        // back\n        drawImage(c, this.c[20], this.x + 23, this.y + 78, 44, 44, this.rot)\n\n        // render the hitbox\n        /*c.strokeStyle = this.ccol\n        c.beginPath()\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh)\n        c.stroke()*/\n\n        if(this.showclock) {\n            c.drawImage(this.c[0], this.x + 50, this.y - 100)\n            this.drawPieSlice(c, this.x + 91, this.y - 100 + 41, 37, rad(- 90), rad(this.cend - 90), this.ccols[this.cindex])\n        }\n        \n    }\n\n    startClock() {\n        if(!this.showclock) {\n            this.cend = 0\n            this.showclock = true\n            this.cindex = 0\n            this.cts = timestamp() + this.tinc\n        }\n    }\n\n    stopClock() {\n        this.showclock = false\n    }\n\n    update() {\n        // bob up and down\n        \n        if(this.count > 3) {\n            this.count = 0\n            this.bob += this.inc\n            if(this.bob > 1 || this.bob < 0) {\n                this.inc *= -1\n            }\n            /*if(this.bob < 0) {\n                this.inc = 1\n            }*/\n        }\n        this.count++\n\n        // wheels rotate if we're moving\n        if(this.ismoving) {\n            this.rot -= 2\n            if(this.rot < -360) {\n                this.rot = 0\n            }\n        }\n\n        if(!this.ismoving) {\n            // increment the clock\n            if(timestamp() > this.cts) {\n                this.cend += this.cinc\n                this.cts = timestamp() + this.tinc\n                \n                if(this.cend > 180 && this.cend <= 270) {\n                    if(this.cindex < 1) {\n                        this.hasbeeped = false\n                        this.beep()\n                    }\n                    this.cindex = 1\n                }\n\n                if(this.cend > 270 && this.cend <= 315) {\n                    if(this.cindex < 2) {\n                        this.hasbeeped = false\n                        this.beep()\n                    }\n                    this.cindex = 2\n                }\n                if(this.cend > 315) {\n                    if(this.cindex < 3) {\n                        this.hasbeeped = false\n                        this.beep()\n                    }\n                    this.cindex = 3\n                }\n\n                if(this.cend >= 360) {\n                    if(this.cindex < 4) {\n                        playsound(2)\n                        this.gameover = true\n                    }\n                    this.cindex = 4\n                }\n                \n                if(this.cend <= 180) {\n                    this.cindex = 0\n                }\n\n            }\n        }\n    }\n\n    collideWith(list) {\n        for(let i = 0; i < list.length; i++) {\n            if(!list[i].grabbed) {\n                //if(list[i].name) {\n                    //console.log('Checking ' + list[i].name)\n                    \n                    //console.log(this.hbx, this.hby, this.hbw, this.hbh)\n                    //console.log(list[i].hbx, list[i].hby, list[i].hbw, list[i].hbh)\n\n                    //let r = overlaps(this.hbx, this.hby, this.hbw, this.hbh,\n                    //    list[i].hbx, list[i].hby, list[i].hbw, list[i].hbh)\n                    //console.log('r is ', r)\n                //}\n\n                if(overlaps(this.hbx, this.hby, this.hbw, this.hbh,\n                            list[i].hbx, list[i].hby, list[i].hbw, list[i].hbh\n                ) > 0.0) {\n                    this.beep()\n                    this.ismoving = false\n                    this.startClock()\n                    return true\n                }\n            }\n        }\n        this.hasbeeped = false\n        this.ismoving = true\n        this.stopClock()\n        return false\n    }\n\n    beep() {\n        if(!this.hasbeeped) {\n            playsound(1)\n            window.setTimeout(playsound, 400, 1)\n            this.hasbeeped = true\n        }\n    }\n}\n\nexport default Van","import { randomint, drawImage } from './util.js'\n\nclass House {\n    constructor(x, y, config) {\n        this.x = x\n        this.y = y\n        this.oldy = y\n        this.c = config\n\n        this.hbx = this.x\n        this.hby = this.y\n        this.hbw = this.c[22].width\n        this.hbh = this.c[22].height\n        \n        this.miny = this.y + 270\n        this.grabbed = false\n        this.bashed = false\n\n        this.alts = [ 22, 36, 37 ]\n        this.i = 22\n        this.flip = false\n        this.changeCostume()\n    }\n\n    changeCostume() {\n        if(this.alts.length > 0) {\n            this.i = this.alts[randomint(0, this.alts.length - 1)]\n        }\n    }\n\n    render(c) {\n        // draw the house\n        drawImage(c, this.c[this.i], this.x, this.y, this.hbw, this.hbh, 0, this.flip)\n\n        // render the hitbox\n        \n        /* c.strokeStyle = 'red'\n        c.beginPath()\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh)\n        c.stroke() */\n    }\n\n    reset() {\n        this.x = 1500 + randomint(0, 1000)\n        this.y = this.oldy\n        this.bashed = false\n        this.changeCostume()\n        this.flip = !this.flip\n        const e = new CustomEvent('s', { detail: { 'n': 'houses' }})\n        window.dispatchEvent(e)\n    }\n\n    update() {\n        this.hbx = this.x\n        this.hby = this.y\n\n        if(this.x < -400) {\n            this.reset()\n        }\n\n        if(this.y >= this.miny - 45 && this.y < this.miny - 4) {\n            this.y++\n        }\n    }\n\n    bash(power) {\n        this.y += Math.ceil(power * 0.1)\n        if(this.y > this.miny) {\n            this.y = this.miny\n        }\n    }\n}\n\nexport default House","import { timestamp, randomint, drawImage } from './util.js'\nimport Grabbable from './grab.js'\nimport { playsound } from './sound.js'\n\nconst STATE = {\n    STANDING: 0,\n    HELD: 1,\n    EATED: 2,\n    EMPTY: 3,\n    FALLING: 4\n}\n\n// a generic thing you can grab, eat and smash\nclass Thing extends Grabbable {\n    constructor(x, y, c, index, w, h, flip, name) {\n        super(x,y,c, index, w - 20, h - 20, 2.0, 10, 10, 10, 10, w - 20, h - 20, name)\n\n        this.oldy = y\n        this.i = index\n\n        this.state = STATE.STANDING\n        this.energy = 100\n        this.ts = timestamp()\n        this.closeEyes = true\n        this.chomp = true\n\n        this.flip = flip\n        this.w = w\n        this.h = h\n\n        this.hbx = this.x\n        this.hby = this.y\n        this.hbw = this.c[index].width\n        this.hbh = this.c[index].height\n\n        // aternative colour versions\n        this.alts = []\n    }\n\n    changeCostume() {\n        if(this.alts.length > 0) {\n            this.i = this.alts[randomint(0, this.alts.length - 1)]\n        }\n    }\n\n    drawWheels(c) {\n        if(this.i >= 30 && this.i <= 33) {\n            let o = 0\n            if(this.flip) {\n                o = 22\n            }\n            // and the wheels\n            // front\n            drawImage(c, this.c[20], this.x + 131 + o, this.y + 78, 44, 44, 0)\n            // back\n            drawImage(c, this.c[20], this.x + 23 + o, this.y + 78, 44, 44, 0)\n        }\n    }\n\n    render(c, override) {\n        if(this.dead) {\n            return\n        }\n\n        if(this.isFalling()) {\n            //c.drawImage(this.c[this.i], this.x, this.y)\n            drawImage(c, this.c[this.i], this.x, this.y, this.w, this.h, 0, this.flip)\n            this.drawWheels(c)\n            return\n        }\n\n        if(!this.grabbed || override) {\n            drawImage(c, this.c[this.i], this.x, this.y, this.w, this.h, 0, this.flip)\n            this.drawWheels(c)\n        }\n\n        /*\n        c.strokeStyle = 'red';\n        c.beginPath();\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh);\n        c.stroke();\n\n        c.strokeStyle = 'black';\n        c.beginPath();\n        c.rect(this.gx, this.gy, this.gw, this.gh)\n        c.stroke();*/\n    }\n\n    reset() {\n        this.x = 1500 + randomint(0, 800)\n        this.y = this.oldy\n        this.dead = false\n        this.state = STATE.STANDING\n        this.grabbed = false\n        this.energy = 100\n        this.ts = timestamp()\n        this.flip = !this.flip\n        this.changeCostume()\n        this.busy = false\n    }\n\n    update() {\n\n        if(this.x < -200 || this.dead) {\n            this.sendDead()\n            this.reset()\n        }\n\n        super.update()\n        this.hbx = this.x\n        this.hby = this.y\n\n        if(this.state === STATE.EATED) {\n            let t = timestamp()\n            if(t >= this.ts) {\n                this.ts = timestamp() + 300\n                if(this.energy > 0) {\n                    this.energy = 0\n                    playsound(5)\n                }\n            }\n        }\n        if(this.isFalling() && this.y < 1400) {\n            this.y += 20;\n        }\n        if((this.isFalling() && this.y >= 800) || \n            (this.state === STATE.STANDING && this.x < -400)) {\n            this.dead = true\n        }\n\n        if(this.state === STATE.EMPTY) {\n            this.dead = true\n        }\n    }\n\n    isFalling() {\n        return this.state === STATE.FALLING\n    }\n\n    isInAction() {\n        return this.state === STATE.EATED\n    }\n\n    startAction() {\n        if(this.grabbed && this.energy > 0) {\n            this.ts = timestamp() + 300\n            this.state = STATE.EATED\n        }\n    }\n\n    endAction() {\n        if(this.grabbed) {\n            if(this.energy > 0) {\n                this.state = STATE.HELD\n            } else {\n                this.state = STATE.EMPTY\n                this.sendEaten()\n            }\n        }\n    }\n\n    isExhausted() {\n        //console.log(this.energy)\n        return this.energy <= 0\n    }\n\n    canBeChucked() {\n        return true\n    }\n\n    releaseAction() {\n        this.energy = 0\n        this.grabbed = true\n        this.state = STATE.FALLING\n        playsound(7)\n        this.busy = false\n    }\n\n    chompIt() {\n        this.busy = true\n    }\n}\n\nexport default Thing","class Rect {\n    constructor(x, y, w, h) {\n        this.x = x\n        this.y = y\n        this.w = w\n        this.h = h\n    }\n}\n\nexport default Rect","import { drawImage, drawImage2, rad, overlaps, randomint } from './util.js'\nimport Rect from './rect.js'\n\nclass Bridge {\n    constructor(x, y, config) {\n        this.x = x\n        this.y = y\n        this.c = config\n\n        this.isBridge = true\n\n        this.img = this.c[38]\n        this.anchorimg = this.c[25]\n\n        //generate a bunch of hitboxes spread along the bridge length\n        this.hitboxes = []\n        for(let i = 1; i < 10; i++) {\n            let r = new Rect(this.x - 19 + 48 * i, y - 23, 39, 46)\n            r.offset = 48 * i\n            this.hitboxes.push(r)\n        }\n        this.reset(x)\n\n        // special hitbox for the van\n        this.hbx = this.x - 50\n        this.hby = this.y - 100\n        this.hbw = 30\n        this.hbh = 100\n    }\n\n    reset(x) {\n        this.x = x\n        this.rot = 0\n        this.targetRot = 83 - randomint(0, 20)\n        this.locked = false\n        this.sproing = false\n        this.sproingDist = (1366 / 2) + randomint(60, 200)\n    }\n\n    render(c) {\n        drawImage2(c, this.img, this.x, this.y, this.rot, 21, 23)\n        drawImage(c, this.anchorimg, this.x - 30, this.y - 40, this.anchorimg.width, this.anchorimg.height)\n\n        /*\n        c.strokeStyle = 'red'\n        this.hitboxes.forEach(r => {\n            c.beginPath()\n            c.rect(r.x, r.y, r.w, r.h)\n            c.stroke()\n        })*/\n        /*\n        c.strokeStyle = 'white'\n        c.beginPath()\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh)\n        c.stroke()*/\n    }\n\n    update() {\n        \n        this.hbx = this.x - 50\n        if(this.locked) {\n            this.hby = -100\n            if(this.rot > 0) {\n                this.rot -= 0.5\n            }\n            return\n        }\n        this.hby = this.y - 100\n\n        this.hitboxes.forEach(h => {\n            h.x = this.x - 19 + h.offset * Math.cos(rad(this.rot))\n            h.y = this.y - 23 + h.offset * Math.sin(rad(this.rot)) * -1\n        })\n        if(!this.sproing) {\n            if(this.x < this.sproingDist && this.rot < this.targetRot) {\n                this.rot += 5\n            }\n            if(this.rot >= this.targetRot) {\n                this.sproing = true\n            }\n        }\n    }\n\n    push(inc) {\n        this.rot += inc\n        if(this.rot < 0) {\n            this.rot = 0\n            \n        }\n        if(this.rot > 90) {\n            this.rot = 90\n        }\n        if(this.rot < 3) {\n            this.locked = true\n            this.sendEvent()\n\n            return true\n        }\n        return false\n    }\n\n    pushLeft() {\n        return this.push(3)\n    }\n\n    pushRight() {\n        return this.push(-3)\n    }\n\n    collideSide(r1, r2){\n        let dx = (r1.x + r1.w / 2)-(r2.x + r2.w / 2);\n        let dy = (r1.y + r1.h / 2)-(r2.y + r2.h / 2);\n        let width = (r1.w + r2.w) / 2;\n        let height = (r1.h + r2.h) / 2;\n        let crossWidth = width * dy;\n        let crossHeight = height * dx;\n        let collision = 'n';\n        if(Math.abs(dx) <= width && Math.abs(dy) <= height){\n            if(crossWidth > crossHeight){\n                collision = (crossWidth > (-crossHeight)) ? 'b' : 'l';\n            } else {\n                collision = (crossWidth > -(crossHeight)) ? 'r' : 't';\n            }\n        }\n        return (collision);\n    }\n\n    collide(x, y, w, h) {\n        if(this.locked) {\n            return false\n        }\n        if(!this.sproing) {\n            return false\n        }\n        for(let i = 0; i < this.hitboxes.length; i++) {\n            let l = this.hitboxes[i]\n            if(overlaps(x, y, w, h,\n                l.x, l.y, l.w, l.h\n            ) > 0.1) {\n                let r = this.collideSide(new Rect(x, y, w, h), l)\n                if(r === 'l' || l === 't') {\n                    return this.pushRight()\n                }\n                if(r === 'b' || l === 'r') {\n                    return this.pushLeft()\n                }\n            }\n        }\n        return false\n    }\n\n    sendEvent() {\n        const e = new CustomEvent('s', { detail: { 'n': 'bridges' }})\n        window.dispatchEvent(e)\n    }\n}\n\nexport default Bridge","import { rad } from './util.js'\n\nlet colours = []\n\nlet ctx = null\n\nconst r = {\n    // colour\n    'k': (l) => {\n        ctx.fillStyle = colours[l[0]];\n        ctx.strokeStyle = colours[l[0]];\n    },\n    // filled rectangle\n    'b': (l) => {\n        ctx.fillRect(l[0], l[1], l[2], l[3]);\n    },\n    // line\n    'd': (l) => {\n        ctx.beginPath();\n        ctx.moveTo(l[0],l[1]);\n        ctx.lineTo(l[2],l[3]);\n        ctx.stroke();\n    },\n    // filled polygon\n    'f': (l) => {\n        ctx.beginPath();\n        ctx.moveTo(l[0],l[1]);\n        for(let i = 2; i < l.length; i += 2) {\n            ctx.lineTo(l[i], l[i + 1]);\n        }\n        ctx.fill();\n    },\n    // filled circle\n    'i': (l) => {\n        ctx.beginPath();\n        ctx.arc(l[0], l[1], l[2], 0, rad(360), 0);\n        ctx.fill();\n    },\n    // filled rounded rect\n    'n': (l) => {\n        roundRect(l[0], l[1], l[2], l[3], l[4], true);\n    }, \n    // line width\n    'o': (l) => {\n        ctx.lineWidth = l[0];\n    },\n    // filled arc\n    'a': (l) => {\n        ctx.beginPath();\n        ctx.arc(l[0], l[1], l[2], rad(l[3]), rad(l[4]), true);\n        ctx.fill();\n    },\n    // NOT USING THESE\n    /*\n    z: (l) => {\n        ctx.globalAlpha = l[0];\n    },\n    // stroke rectangle\n    a: (l) => {\n        ctx.strokeRect(l[0], l[1], l[2], l[3]);\n    },\n    // clear rectangle\n    c: (l) => {\n        ctx.clearRect(l[0], l[1], l[2], l[3]);\n    },\n    // stroke polygon\n    e: (l) => {\n        ctx.beginPath();\n        ctx.moveTo(l[0],l[1]);\n        for(let i = 2; i < l.length; i += 2) {\n            ctx.lineTo(l[i], l[i + 1]);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    },\n    // text\n    g: (l) => {\n        ctx.font = l[0] + 'px ' + fonts[l[1]];\n        ctx.fillText(texts(l[2]),l[3],l[4]);\n    },\n    // stroke circle\n    h: (l) => {\n        ctx.beginPath();\n        ctx.arc(l[0], l[1], l[2], 0, rad(360), 0);\n        ctx.stroke();\n    },\n    // stroke rounded rect\n    m: (l) => {\n        roundRect(l[0], l[1], l[2], l[3], l[4], false);\n    },\n    */\n};\n\n// rounded rectangle\nconst roundRect = (x, y, w, h, r, f) => {\n    let z = {tl: r, tr: r, br: r, bl: r}\n    ctx.beginPath()\n    ctx.moveTo(x + z.tl, y)\n    ctx.lineTo(x + w - z.tr, y)\n    ctx.quadraticCurveTo(x + w, y, x + w, y + z.tr)\n    ctx.lineTo(x + w, y + h - z.br)\n    ctx.quadraticCurveTo(x + w, y + h, x + w - z.br, y + h)\n    ctx.lineTo(x + z.bl, y + h)\n    ctx.quadraticCurveTo(x, y + h, x, y + h - z.bl)\n    ctx.lineTo(x, y + z.tl)\n    ctx.quadraticCurveTo(x, y, x + z.tl, y)\n    ctx.closePath()\n    if (f) {\n        ctx.fill()\n    } else {\n        ctx.stroke()\n    }\n}\n\nconst setPalette = (c) => {\n    colours = c\n}\n\nconst replaceColour = (index, colour) => {\n    let old = colours[index]\n    colours[index] = '#' + colour\n    return old\n}\n\nconst processCommands = (commands, flag, inc) => {\n    for(let i = 0; i < commands.length; i++){\n        let c = commands[i];\n        let l = c.split(',');\n        const f = l.shift();\n        if(f === 'x') {\n            if(parseInt(l[0]) > 0) {\n                // sub process, outline in black\n                processCommands([].concat(commands.slice(i + 1)), true, parseInt(l[0]));\n            } else {\n                // it's an x 0, bail out\n                if(flag) {\n                    return;\n                }\n            }\n            // always skip the x commands\n            continue;\n        }\n        // params\n        let p = l.map(Number);\n        // this generates the black outline\n        if(flag && inc > 0) {\n            switch(f) {\n                case 'k':\n                    p[0] = 0;\n                break;\n                case 'n':\n                case 'b':\n                    p[0] -= inc;\n                    p[1] -= inc;\n                    p[2] += inc * 2;\n                    p[3] += inc * 2;\n                break;\n                case 'a':\n                case 'i':\n                    p[2] += inc;\n                break;\n\n            }\n        }\n        //console.log(f, l[0]);\n        // there's a good chance you could replace a big chunk\n        // of this file by using this:\n        // let path = new Path2D('m100,100v50h50v-50')\n        // ctx.stroke(path)\n        //\n        r[f](p)\n    }\n}\n\n\nconst vgrender = (newctx, data) => {\n    //console.log('[' + data + ']');\n    let commands = data.split(/([a-z]\\,[\\d+\\,*]+)/).filter(s => s !== '')\n    //console.log(commands);\n    if(!commands) return\n    ctx = newctx\n    ctx.lineWidth = 1\n    processCommands(commands, false, 0)\n    return ctx\n};\n\n/*\nconst vgrender2 = (newctx, encoded_data) => {\n    let commands = encoded_data.split(/([a-z][^a-z]+)/).filter(s => s !== '')\n    // convert each number to something sensible\n    let newcommands = [];\n    commands.forEach(c => {\n        let l = c[0];\n        let nc = c.substr(1).split('').map(a=>{if(a.charCodeAt(0) > 100) return a.charCodeAt(0) - 128; else return a });\n        newcommands.push(l + ',' + nc.join(','))\n        console.log(l + ',' + nc.join(','));\n    });\n    if(!newcommands) return\n    ctx = newctx\n    ctx.lineWidth = 1\n    processCommands(newcommands, false, 0)\n    return ctx\n}\n*/\n\nexport { vgrender, setPalette, replaceColour };\n","// this is all the mini-svg data\n// format is: \n// w, h, data\nconst data = [\n    /** -------------------------------\n     * \n     *     Hans the Giant\n     * \n     * -------------------------------- */\n    // open eye\n    80,80,'x,2k,2i,41,41,37x,0', \n    // closed eye\n    80,80,'x,2k,3i,41,41,37x,0k,0o,2d,4,46,78,26d,8,46,78,41d,6,48,79,55',\n    // fist\n    272,175,'x,2k,3i,33,50,28n,4,44,54,122,20x,0k,2i,32,45,23k,3i,33,55,28k,6n,40,19,54,151,20x,2k,3i,74,40,32n,45,45,54,122,20x,0k,2i,73,38,29k,3i,72,43,29k,6n,89,17,54,151,20x,2k,3i,126,38,33n,94,37,62,129,20x,0k,2i,128,37,31k,3i,127,45,34k,6n,145,30,53,137,20x,2k,3n,156,27,91,124,20x,0x,2k,3i,183,41,30n,151,32,64,136,20x,0k,2i,184,41,29k,3i,183,48,31k,6i,215,107,33n,207,73,53,68,20x,2k,3i,220,103,33n,216,69,53,68,20x,0',\n    // nose\n    155,135,'k,4i,124,103,31i,76,106,31i,32,102,31x,2k,4i,122,91,31i,34,91,31x,0x,2k,6i,75,57,54i,75,99,27x,0k,2i,50,35,14',\n    // head\n    //455,470,'x,2k,3i,52,216,50k,4i,48,219,45i,62,276,27x,0k,7n,67,151,108,156,20x,2k,3i,403,215,50k,4i,408,219,45i,396,275,27x,0k,7n,288,149,108,156,20x,2k,3i,200,434,32i,248,435,32i,230,160,157n,73,88,317,344,20x,0k,6i,360,322,5i,326,291,5i,356,267,5i,116,283,5k,7i,303,211,43i,145,214,43k,2i,173,48,22',\n    455,353,'x,2k,3i,52,216,50k,4i,48,219,45i,62,276,27x,0k,7n,67,151,108,156,20x,2k,3i,403,215,50k,4i,408,219,45i,396,275,27x,0k,7n,288,149,108,156,20x,2k,3i,200,434,32i,248,435,32i,230,160,157n,73,88,317,344,20x,0k,6i,360,322,5i,326,291,5i,356,267,5i,116,283,5k,7i,303,211,43i,145,214,43k,2i,173,48,22',\n    // body\n    570,500,'x,2k,11n,2,3,566,495,20k,9n,2,10,565,487,20x,0k,0o,2d,277,130,277,516k,10o,3d,279,124,280,522i,467,158,15i,484,234,29i,469,207,16i,428,310,7k,10i,281,167,28i,285,256,28i,285,350,28k,1f,152,51,282,166,441,40k,2f,164,53,282,160,426,44o,2k,0d,163,62,283,168d,436,45,280,169x,2k,14i,277,163,26k,13i,278,165,24x,0k,2i,265,147,3x,2k,14i,283,253,26k,13i,283,255,24x,0k,2i,274,236,3x,2k,14i,283,347,26k,13i,284,349,24x,0k,2i,272,330,3',\n    // eyebrow\n    105,40,'x,2k,5n,2,3,97,32,20x,0',\n    // hair\n    40,105,'x,2k,5n,2,2,36,97,20x,0',\n    // pupil - green\n    43,43,'k,8i,21,22,21k,0i,21,22,11k,2i,29,15,5',\n    // mouth grr\n    208,63,'x,2k,2n,2,2,203,53,20x,0o,2k,0d,188,247,395,247d,0,26,206,26',\n    // mouth open/ouch\n    60,60,'x,2k,2i,30,31,27x,0',\n    // mouth hmm\n    172,6,'k,0o,4d,0,2,171,2',\n    // chomping mouth with shadow - outlined teeth\n    321,247,'k,21i,136,215,32i,186,215,32n,2,15,317,200,20x,2k,3i,136,205,32i,186,205,32n,2,2,317,200,20x,0k,17k,0n,67,27,187,125,20k,29i,164,70,66x,2k,5a,139,140,41,0,180a,192,141,41,0,180x,0x,2k,14n,85,141,50,27,5n,136,136,51,29,5n,189,138,51,27,5x,0k,3b,73,152,197,35k,0d,83,152,243,152',\n    /** -------------------------------\n     * \n     *     Misc\n     * \n     * -------------------------------- */\n    // glass of beer - upright\n    320,445,'x,2k,2n,209,321,102,42,20n,210,123,102,42,20n,269,125,46,237,20x,0x,2k,2n,44,389,200,52,20k,0f,63,395,73,372,28,111,256,107,220,366,227,399k,2f,61,403,75,373,30,112,253,110,218,364,227,399x,0b,36,79,215,39k,13i,145,344,63i,141,123,91f,82,346,49,122,234,118,208,350k,2i,139,280,8i,114,205,5i,127,186,4i,118,151,3f,88,275,103,330,95,272,70,106,63,107f,182,340,163,389,195,348,226,110,198,103f,49,123,128,100,239,124,235,79,44,78x,2k,2i,48,108,29i,26,94,19i,76,83,19i,44,72,19i,72,59,19i,111,55,37i,123,93,19i,123,119,11i,153,65,25i,190,67,25i,220,80,19i,244,105,18i,242,79,18i,226,53,18i,202,35,18i,168,31,24i,135,32,24i,82,43,24i,55,52,24x,0',\n    // glass of beer - drinking\n    280,330,'x,2k,2i,30,54,23i,60,43,23i,93,31,23i,136,26,23i,156,49,23i,118,46,23i,171,71,23i,26,79,23x,0x,2k,2i,100,129,93x,0k,2f,9,137,24,261,179,260,193,137k,0o,2d,6,137,27,265d,194,138,176,264k,14i,99,129,76f,24,139,42,268,160,268,173,138k,2i,93,84,5i,117,119,5i,80,136,8x,2k,2n,177,98,95,39,20x,0x,2k,2n,236,98,39,118,20x,0x,2k,2n,174,182,102,39,20x,0x,2k,2i,99,233,96x,0k,14i,100,232,79k,13a,101,234,78,180,0k,2i,65,277,7i,114,255,4i,107,283,4',\n    // glass empty\n    320,445,'x,2k,2n,209,321,102,42,20n,210,123,102,42,20n,269,125,46,237,20x,0x,2k,2n,44,389,200,52,20k,0f,63,395,73,372,28,111,256,107,220,366,227,399k,2b,31,79,222,37f,61,403,75,373,30,112,254,108,218,364,227,399x,0b,36,79,215,39k,15i,145,344,63f,82,346,40,96,243,96,208,350k,2f,182,340,163,389,195,348,231,91,198,91',\n\n    /** -------------------------------\n     * \n     *     Level data\n     * \n     * -------------------------------- */\n     // cloud\n     320,225,'k,2i,148,62,50i,217,52,50i,270,95,50i,234,159,50i,146,159,65i,59,149,53i,106,97,53i,197,107,53',\n     // tree\n     153,473,'x,2k,24b,56,277,28,194x,0x,2k,25i,91,254,53i,98,183,53i,94,119,53i,85,60,35i,66,24,22i,58,275,51i,54,207,51i,56,129,51i,56,70,36x,0k,26i,88,256,53i,61,273,53i,56,208,53i,59,129,53i,89,121,53i,94,184,53i,86,60,30i,64,26,21i,53,69,33',\n     // ground block\n     100,104,'k,18b,0,4,100,100k,19i,25,55,5i,17,71,2i,45,46,5i,71,77,3i,46,73,5i,92,64,2i,76,51,2k,20b,0,4,100,13k,0b,0,0,100,12k,22b,0,2,100,8k,23b,0,2,100,3',\n     // van - 19\n     220,105,'x,2k,2n,4,2,180,3,2k,29n,37,99,119,4,2k,28n,5,7,179,91,5f,185,6,167,98,205,98,206,59x,0k,27b,5,54,200,9k,0o,2d,205,60,184,3d,207,57,207,93x,2k,2i,201,62,6k,29n,187,77,20,24,5n,2,77,13,23,5k,17n,4,58,11,13,5x,0k,14n,12,12,104,38,5x,2k,29a,153,98,24,0,180a,45,98,24,0,180k,16n,130,12,45,36,5x,0k,0f,180,51,179,8,195,49k,16f,181,48,180,10,194,48k,0o,2d,195,51,180,9',\n     // van wheel - 20\n     44,44,'k,0i,22,22,22k,12i,23,22,10k,21i,23,6,3',\n     // grass - 21\n     30,40,'k,8f,2,3,1,37,14,33f,16,1,8,37,19,33f,28,6,13,34,25,34k,0o,2d,2,3,11,23d,2,3,1,40d,16,0,10,25d,16,0,19,26d,28,3,19,26d,28,3,26,37',\n     // house 22 30 31\n     255,375,'x,2k,17n,2,2,251,98,20k,2b,2,15,251,272k,21b,2,269,251,100x,0x,2k,19n,19,150,61,109,10x,2k,12i,69,212,3k,16n,97,149,143,58,10n,97,42,60,58,10n,19,42,60,58,10n,97,41,60,58,10n,180,41,60,58,10k,1b,14,257,70,10x,0k,21b,1,15,252,5k,15b,108,149,12,58b,188,42,12,56b,106,42,12,58b,27,42,12,58k,3b,11,2,233,3k,0o,2d,1,14,254,14',\n     // tractor 23\n     210,152,'k,0n,54,37,8,44,2x,2k,27b,101,6,79,63n,17,62,177,57,20x,0x,2k,21n,49,116,85,3,4n,40,72,48,24,5a,166,119,50,325,190k,1b,141,13,35,46x,0k,0i,28,125,27i,165,114,39o,2d,117,109,209,90k,13i,165,114,18i,28,125,13x,2k,2i,18,82,5k,2n,98,2,85,4,4x,0k,27f,103,8,88,69,112,69k,0f,137,13,137,62,116,71,96,71,106,14k,1f,136,15,136,58,118,69,97,69,108,16k,0o,2d,102,9,89,67',\n     // bridge 24\n     51,44,'x,2k,19n,2,4,47,35,5x,0k,19b,-1,6,32,30x,2k,18i,26,22,20x,0k,33i,26,22,17k,32i,26,22,15k,33i,26,22,13k,32i,26,22,10k,33i,26,22,9k,32i,26,22,5k,33i,26,22,3',\n     // bridge anchor 25\n     52, 137, 'x,2k,19i,25,25,23b,2,29,47,104x,0k,18i,24,27,23b,2,29,45,107k,19i,25,31,10k,1i,25,31,4',\n     // sausage, bottom part 26\n     152,312,'k,0f,1,269,83,228,49,312k,19f,6,268,78,237,48,308x,2k,19i,70,218,52x,0k,0f,20,201,43,134,42,69,151,66,152,158,118,245k,24f,21,206,46,131,42,69,148,66,149,157,117,245k,19f,21,206,44,130,42,69,148,66,149,157,117,245x,2k,24i,73,61,30i,119,59,30i,93,33,30x,0k,2i,78,75,4i,99,18,3k,34i,124,41,4i,62,53,7i,99,49,6i,124,73,2',\n     // sausage, middle 27\n     152,445,'k,0f,1,402,83,361,49,445k,19f,6,401,78,370,48,441x,2k,19i,70,351,52x,0k,0f,20,334,43,267,27,75,134,44,152,201,151,292,117,382k,24f,21,339,46,264,29,69,132,41,149,197,150,290,113,387k,19f,21,339,44,263,30,81,127,36,145,201,147,292,113,388x,2k,24i,56,69,30i,101,54,30i,66,34,30x,0k,2i,65,71,4i,58,32,3k,34i,81,49,4i,46,63,7i,111,42,6i,101,65,2',\n     // full sausage 28\n     175,522,'k,0f,24,479,106,438,72,522f,35,3,65,61,1,36k,19f,29,478,101,447,71,518f,36,5,60,57,5,36x,2k,19i,93,428,52i,77,86,52x,0k,0f,43,411,66,344,50,152,23,100,121,52,157,121,175,278,174,369,140,459k,24f,44,416,69,341,61,151,47,112,120,54,153,119,172,274,173,367,136,464k,19f,44,416,67,340,55,156,25,98,113,48,150,115,168,278,170,369,136,465k,24i,89,60,12k,17',\n     // top teeth 29\n     111,34,'x,2k,14n,2,2,51,29,5n,58,1,51,31,5x,0k,0d,0,19,112,19'\n     // van alt - 30, 31, 32, 33\n     // tractor alt - 34, 35\n     // house alt 36, 37\n     // full bridge 38\n\n]\n\nconst palette = [\n    '#000',\n    '#ccc',\n    '#fff',\n    '#ffd5d5', // pink skin,\n    '#faa', // dark pink skin\n    '#c83737', // hair - alts for these: \n    '#ff9191', // nose,\n    '#ff8080', // hands,\n    '#080',    // eyes / plants - alt: 8c83ff\n    '#a6cda6', // body\n    '#85ba85', // stains\n    '#e6f1e6', // shoulders,\n    '#fd5', // ring\n    '#ffe381', // button / beer\n    '#fff6d5', // button highlight / beer\n    '#d5f6ff', // empty glass\n    '#aef', // window blue\n    '#ff2a2a', // red\n    '#830', // brown door/ground\n    '#a40', // brown highlight\n    '#520', // brown shadow\n    '#666',    // dark gray\n    '#59eb59', // ground grass\n    '#a2f4a2', // ground grass highlight\n    '#d38d5f', // tree trunk\n    '#abc837', // tree highlight\n    '#677821', // tree green\n    '#3c3cff', // tractor/van\n    '#f60'   , // orange\n    '#4d4d4d', // dark dark gray\n    '#009a9a', // bg trees 1\n    '#00cbcb', // bg trees 2\n    '#deaa87', // tree rings\n    '#fca',    // tree rings 2\n    '#c87137'  // sausage bits\n]\n\nexport { \n    data, \n    palette\n}","//import State from './state.js'\nimport Giant from './giant.js'\nimport Beer from './beer.js'\nimport Sausage from './sausage.js'\nimport { drawImage, randomint, timestamp, text } from './util.js'\nimport { playsound } from './sound.js'\nimport Van from './van.js'\nimport House from './house.js';\nimport Thing from './thing.js';\nimport Bridge from './bridge.js';\nimport * as vg from './mv.js'\nimport { data, palette } from './data.js'\n\nconst GAMESTATE = {\n    'LOADING': 0,\n    'TITLE': 1,\n    'STORY': 2,\n    'CONTROLS': 3,\n    'HOWTO': 4,\n    'GAME': 5,\n    'GAMEOVER': 6\n}\n\nclass PlayState {\n    constructor(c, i) {\n        //super(c, i)\n\n        this.config = {}\n        this.imgs = []\n\n        this.state = GAMESTATE.LOADING\n\n        this.text = [ ['*HANS FIXES','*THE INTERNET', '', 'made for js13k 2018', '', 'code & art by', 'madmarcel', '', 'best played with the dual analog', 'sticks on a gamepad'],\n            ['*Oh no!','Hans the Giants internet connection has broken.','He can\\'t visit his favourite site:', 'www.giantsausages.com', 'Hans is very upset.','','The ISP has sent a very impatient man in an', 'orange van to fix Hans\\' internet.', '', 'Help the man in the van get to Hans\\' giant house.', ''],\n            ['*Hand Controls', 'Use either', '', 'dual analog stick on gamepad', '', 'or', '', 'mouse + arrow keys', '', 'to control Hans the Giants fists', ''],\n            ['*How to Giant', 'Don\\'t keep the man in the van waiting too long!','', 'Smash buildings, flatten bridges.', '', 'Eat or chuck cars & tractors','(Raise things to top of screen to chuck)', '', 'Chuck trees - no veggies for Hans ;)', '', 'Eat and drink all the beer and sausages (Huzzah!)'],\n            ['*GAME OVER', 'You have', '-----------', '', '', '', '', '', '', '']\n        ]\n\n        window.addEventListener('s', e => {\n            let key = e.detail.n\n            let t = e.detail.t\n            if(t) {\n                this.stats[key][t] += 1\n            } else {\n                this.stats[key] += 1\n            }\n        })\n\n        /* DATA for loading state */\n        this.colourSwapSprites = [\n            // number, colours to swap [ index, hex ]\n            // van\n            // 27 - stripe\n            // 28 - van itself\n            // 14 - panel\n            [ 19, 27, '2c84a6', 28, '8ce724', 14, 'ee360d'], // 24 mystery van\n            [ 19, 27, 'fff', 28, 'fff', 14, 'fff'],          // 25 white van\n            [ 19, 27, '000', 28, 'ccc', 14, 'fff'],          // 26 grey van\n            [ 19, 27, 'fff', 28, 'f00', 14, 'fff'],          // 27 red van\n            // tractor\n            // 12 - tyre hubs\n            // 14 - tractor itself\n            // 2 - roof\n            [ 23, 27, 'f00' ], // 28 red\n            [ 23, 27, '648e06', 12, '648e06' ], // 29 - farm green\n            // house\n            // 19 - door\n            // 2 - house\n            // roof - 17\n            // roof highlight - 3\n            // porch - 1\n            [ 22, 19, '0055d4', 2, 'ffd5d5', 17, '0055d4', 3, 'acf', 1, 'fff' ], // 30 pink house\n            [ 22, 19, '080', 2, 'deaa87', 17, '080', 3, 'afa', 1, 'fff' ] // 31 brown house\n        ]\n    }\n\n    init() {\n        this.global = {\n            grabthese: [],\n            bashthese: [],\n            collide: [],\n            pushthese: []\n        }\n\n        this.stats = {\n            'vans': { 'e': 0, 'd': 0 },\n            'tractors': { 'e': 0, 'd': 0 },\n            'trees': 0,\n            'houses': 0,\n            'bridges': 0,\n            'beers': 0,\n            'sausages': 0\n        }\n\n        this.speed = 2;\n        this.grassRot = -10\n        this.grassInc = 0.25\n\n        this.giant = new Giant(428, 345, this.imgs)\n        this.beer = new Beer(2000, 317 - 86, this.imgs)\n        this.van = new Van(20, 553, this.imgs)\n        this.house = new House(800, 404, this.imgs)\n\n        this.sausage = new Sausage(3000, 317 - 86, this.imgs)\n\n        this.things = []\n        \n        this.thing1 = new Thing(2200, 553, this.imgs, 30, this.imgs[30].width, this.imgs[30].height, true, 'vans')\n        this.thing2 = new Thing(1500, 530, this.imgs, 23, this.imgs[23].width, this.imgs[23].height, false, 'tractors')\n\n        this.thing1.alts = [ 30, 31, 32, 33 ] // van\n        this.thing2.alts = [ 23, 34, 35 ] // tractor\n        this.thing1.changeCostume();\n        this.thing2.changeCostume();\n\n        this.bridge = new Bridge(1400, 692, this.imgs)\n        this.global.pushthese.push(this.bridge)\n        this.global.collide.push(this.bridge)\n\n        this.things.push(this.thing1)\n        this.things.push(this.thing2)\n        this.things.push(this.beer)\n        this.things.push(this.house)\n        this.things.push(this.sausage)\n\n        this.global.grabthese.push(this.beer)\n        this.global.grabthese.push(this.thing1)\n        this.global.grabthese.push(this.thing2)\n        this.global.grabthese.push(this.sausage)\n        \n        this.global.bashthese.push(this.house)\n        this.global.collide.push(this.house)\n        this.global.collide.push(this.beer)\n        this.global.collide.push(this.thing1)\n        this.global.collide.push(this.thing2)\n        this.global.collide.push(this.sausage)\n\n\n        // generate the two bg layers\n        this.offset1 = -10\n        this.offset2 = -40\n\n        this.goffset = -10\n\n        this.stopped = false;\n\n        CanvasRenderingContext2D.prototype.shakeScreen = (g, x, y) => {\n            let imgData = g.getImageData(0,0, 1366, 768)\n            g.fillStyle = 'black'\n            g.fillRect(0, 0, 1366, 768)\n            g.putImageData(imgData, x, y)\n        }\n\n        this.trees = []\n        for(let t = 0; t < 4; t++) {\n            this.trees.push({ 'x': t * randomint(300,400) + randomint(-50,100), 'y': 300 + randomint(0, 40) })\n        }\n\n        this.clouds = []\n        for(let t = 0; t < 4; t++) {\n            this.clouds.push({ 'x': t * randomint(200,1600), 'y': 20 + randomint(0, 40) })\n        }\n\n        // setup gamepad\n        this.gamepads = {}\n        this.initGamepad()\n\n        this.initKeyboard()\n\n        this.shaking = false\n        this.shake_timestamp = 0\n        this.gcount = 0\n    }\n\n    generateLevel() {\n\n    }\n\n    drawDialog(c, dtext, left, right) {\n        c.globalAlpha = 0.8\n        c.fillStyle='#000'\n        c.fillRect(450, 100, 466, 568)\n        c.globalAlpha = 1.0\n        let x = 1366/2\n        let y = 200\n        let yinc = 36\n        let f = 18\n        let col = '#f80'\n        dtext.forEach(t => {\n            yinc = 36\n            let l = t\n            if(t[0] === '*') {\n                f = 48\n                l = t.substr(1)\n                yinc = 60\n                col = '#f80'\n            }\n            text(c, l, x, y, col, f, true)\n            f = 18\n            y += yinc\n            col = '#fff'\n        })\n        text(c, left, x - 100, y + 18, '#ff0', f, true)\n        text(c, right, x + 100, y + 18, '#ff0', f, true)\n    }\n\n    renderOverlay(c, i, l, r) {\n        this.renderBackground(c)\n        this.renderFG(c)\n        this.drawDialog(c, this.text[i], l, r)\n    }\n\n    renderTitle(ctx) {\n        this.renderOverlay(ctx, 0, 'play', 'story')\n    }\n\n    renderStory(ctx) {\n        this.renderOverlay(ctx, 1, 'play', 'controls')\n    }\n\n    renderControls(ctx) {\n        this.renderOverlay(ctx, 2, 'play', 'how to play')\n    }\n\n    renderHowTo(ctx) {\n        this.renderOverlay(ctx, 3, 'controls', 'play')\n    }\n\n    renderGame(ctx) {\n        this.renderBackground(ctx)\n        this.giant.render(ctx)\n        this.beer.render(ctx)\n\n        // render the van/vehicles\n        this.van.render(ctx)\n\n        this.things.forEach(t => {\n            t.render(ctx)\n        })\n\n        this.renderFG(ctx)\n        this.house.render(ctx)\n        this.bridge.render(ctx)\n\n        if(this.shaking) {\n            ctx.shakeScreen(ctx, 0, randomint(-25, 25))\n\n            if(timestamp() >= this.shake_timestamp) {\n                this.shaking = false\n                //console.log('off')\n            }\n        }\n    }\n\n    renderGameOver(ctx) {\n        this.renderOverlay(ctx, 4, 'title', 'replay')\n    }\n\n    render(ctx) {\n        switch(this.state) {\n            case GAMESTATE.TITLE:\n                this.renderTitle(ctx)\n            break\n            case GAMESTATE.STORY:\n                this.renderStory(ctx)\n            break\n            case GAMESTATE.CONTROLS:\n                this.renderControls(ctx)\n            break\n            case GAMESTATE.HOWTO:\n                this.renderHowTo(ctx)\n            break\n            case GAMESTATE.GAME:\n                this.renderGame(ctx)\n            break\n            case GAMESTATE.GAMEOVER:\n                this.renderGameOver(ctx)\n            break\n        }\n    }\n\n    renderBackground(ctx) {\n        // clouds\n        this.renderClouds(ctx)\n\n        // trees in the bg\n        this.renderBG(ctx, this.config.tree1, 6, 360, this.offset1)\n        this.renderBG(ctx, this.config.tree2, 6, 460, this.offset2)\n\n        // more bg trees\n        this.renderTrees(ctx)\n    }\n\n    renderFG(ctx) {\n        // render the grass/plants\n        this.renderGrass(ctx, 15, 768 - 122, this.goffset)\n\n        // render the ground blocks\n        this.renderGround(ctx, 15, 768 - 95, 0) //this.goffset)\n    }\n\n    renderBG(ctx, tree, qty, Yoffset, Xoffset) {\n        for(let x = 0; x < qty; x++) {\n            drawImage(ctx, tree, x * 300 + Xoffset, Yoffset)\n        }\n    }\n\n    renderGrass(ctx, qty, Yoffset, Xoffset) {\n        for(let x = 0; x < qty; x++) {\n            drawImage(ctx, this.imgs[21], x * 100 + Xoffset, Yoffset, this.imgs[21].width, this.imgs[21].height, this.grassRot)\n        }\n    }\n\n    renderGround(ctx, qty, Yoffset, Xoffset) {\n        ctx.fillStyle='#aef'\n        ctx.fillRect(0, 740, 1366, 30)\n        for(let x = 0; x < qty; x++) {\n            ctx.drawImage(this.imgs[18], x * 100 + Xoffset, Yoffset)\n        }\n    }\n\n    renderTrees(ctx) {\n        ctx.fillStyle='#077'\n        ctx.fillRect(0, 665, 1366, 108)\n        for(let i = 0; i < this.trees.length; i++) {\n            drawImage(ctx, this.config.tree3, this.trees[i].x, this.trees[i].y, undefined, undefined, 0, false, 0.6)\n        }\n    }\n\n    renderClouds(ctx) {\n        for(let i = 0; i < this.clouds.length; i++) {\n            drawImage(ctx, this.imgs[16], this.clouds[i].x, this.clouds[i].y, 320, 225, -10)\n        }\n    }\n\n    update() {\n        switch(this.state) {\n            case GAMESTATE.GAME:\n                this.updateGame()\n            break\n            default:\n                this.updateIdle()\n            break\n        }\n\n    }\n\n    updateIdle() {\n        // bg offset\n        this.offset1 -= this.speed / 8 // 0.25\n        this.offset2 -= this.speed / 4 //0.5\n        this.goffset -= this.speed\n\n        for(let i = 0; i < this.trees.length; i++) {\n            this.trees[i].x -= this.speed\n            if(this.trees[i].x < -500) {\n                this.trees[i].x += randomint(2000, 4000) + randomint(-40, 40)\n            }\n        }\n\n        if(this.offset1 < -310) {\n            this.offset1 = -10\n        }\n        if(this.offset2 < -340) {\n            this.offset2 = -40\n        }\n        if(this.goffset < -110) {\n            this.goffset = -10\n        }\n\n        // the grass is animated\n        this.grassRot += this.grassInc\n        if(this.grassRot > 15 || this.grassRot < -15) {\n            this.grassInc *= -1\n        }\n\n        // ground offset\n        for(let i = 0; i < this.clouds.length; i++) {\n            this.clouds[i].x -= 0.1\n            if(this.clouds[i].x < -500) {\n                this.clouds[i].x += randomint(2000, 4000) + randomint(-40, 40)\n            }\n        }\n\n        // TODO - add trees\n    }\n\n    updateGame() {\n        this.checkGamePads()\n        this.updateKeys()\n        this.giant.update(this.global)\n        this.van.update()\n        \n        this.bridge.update()\n\n        this.house.update()\n        this.things.forEach(t => {\n            t.update()\n        })\n\n        if(this.van.collideWith(this.global.collide)) {\n            this.stopped = true\n        } else {\n            this.stopped = false\n        }\n\n        // bg offset\n        if(!this.stopped) {\n            this.offset1 -= this.speed / 8 // 0.25\n            this.offset2 -= this.speed / 4 //0.5\n            this.goffset -= this.speed\n\n            for(let i = 0; i < this.trees.length; i++) {\n                this.trees[i].x -= this.speed\n                if(this.trees[i].x < -500) {\n                    this.trees[i].x += randomint(2000, 4000) + randomint(-40, 40)\n                }\n            }\n\n            this.things.forEach(t => {\n                if(!t.grabbed) {\n                    t.x -= this.speed\n                }\n            })\n            this.bridge.x -= this.speed\n        }\n        if(this.offset1 < -310) {\n            this.offset1 = -10\n        }\n        if(this.offset2 < -340) {\n            this.offset2 = -40\n        }\n        if(this.goffset < -110) {\n            this.goffset = -10\n            if(this.gcount > 40) {\n                this.speed++\n                this.gcount = 0\n            }\n            this.gcount++\n        }\n\n        // the grass is animated\n        this.grassRot += this.grassInc\n        if(this.grassRot > 15 || this.grassRot < -15) {\n            this.grassInc *= -1\n        }\n\n        // ground offset\n        for(let i = 0; i < this.clouds.length; i++) {\n            this.clouds[i].x -= 0.1\n            if(this.clouds[i].x < -500) {\n                this.clouds[i].x += randomint(2000, 4000) + randomint(-40, 40)\n            }\n        }\n\n        let bl = this.giant.lefthand.collideWith(this.global.bashthese)\n        let br = this.giant.righthand.collideWith(this.global.bashthese)\n\n        if(bl.r) {\n            //console.log('hit left', bl)\n            this.bashThing(bl.o, bl.c)\n        }\n        if(br.r) {\n            //console.log('hit right', br)\n            this.bashThing(br.o, br.c)\n        }\n\n        if(this.giant.lefthand.push(this.global.pushthese) || this.giant.righthand.push(this.global.pushthese)) {\n            playsound(randomint(2,4))\n            this.setShakeScreen(150)\n        }\n\n        if(this.van.gameover) {\n            this.prepStats()\n            this.state = GAMESTATE.GAMEOVER\n        }\n    }\n\n    bashThing(object, count) {\n        if(count > 10) {\n            object.bash(count)\n            // play sound\n            playsound(randomint(2,4))\n            this.setShakeScreen(200)\n            object.bashed = false\n        }\n    }\n\n    setShakeScreen(duration) {\n        this.shaking = true\n        this.shake_timestamp = timestamp() + duration\n    }\n\n    processClick(mx, my) {\n        mx = Math.floor(mx)\n        my = Math.floor(my)\n        this.handleClick(mx, my)\n    }\n\n    processMove(mx, my) {\n        mx = Math.floor(mx)\n        my = Math.floor(my)\n        this.handleMove(mx, my)\n    }\n\n    handleMove(mx, my) {\n        if(this.state === GAMESTATE.GAME) {\n            this.giant.righthand.set(mx,my, 3)\n\n            let br = this.giant.righthand.collideWith(this.global.bashthese)\n            if(br.r) {\n                this.bashThing(br.o, br.c)\n            }\n        }\n    }\n\n    handleClick(mx, my) {\n        const m = 1366 / 2\n        switch(this.state) {\n            case GAMESTATE.TITLE:\n                if(mx > m) {\n                    this.state = GAMESTATE.STORY\n                } else {\n                    this.init()\n                    this.state = GAMESTATE.GAME\n                }\n            break\n            case GAMESTATE.STORY:\n                if(mx > m) {\n                    this.state = GAMESTATE.CONTROLS\n                } else {\n                    this.init()\n                    this.state = GAMESTATE.GAME\n                }\n            break\n            case GAMESTATE.CONTROLS:\n                if(mx > m) {\n                    this.state = GAMESTATE.HOWTO\n                } else {\n                    this.init()\n                    this.state = GAMESTATE.GAME\n                }\n            break\n            case GAMESTATE.HOWTO:\n                if(mx > m) {\n                    this.init()\n                    this.state = GAMESTATE.GAME\n                } else {\n                    this.state = GAMESTATE.CONTROLS\n                }\n            break\n            case GAMESTATE.GAMEOVER:\n                if(mx > m) {\n                    this.init()\n                    this.state = GAMESTATE.GAME\n                } else {\n                    this.state = GAMESTATE.TITLE\n                }\n            break\n        }\n    }\n\n    prepStats() {\n        /*\n        this.stats = {\n            'vans': { 'e': 0, 'd': 0 },\n            'tractors': { 'e': 0, 'd': 0 },\n            'trees': 0,\n            'houses': 0,\n            'bridges': 0,\n            'beers': 0,\n            'sausages': 0\n        }\n        */\n        let keys = Object.keys(this.stats)\n        let word = 'chucked'\n        for(let i = 3; i < 10; i++) {\n            let k = keys[i - 3]\n            if(i < 5) {\n                this.text[4][i] = `chucked ${this.stats[k]['d']} ${k} and eaten ${this.stats[k]['e']} ${k}`\n            } else {\n                if(i == 5) {\n                    word = 'chucked'\n                }\n                if(i > 5 && i < 8) {\n                    word = 'smashed'\n                }\n                if(i == 8) {\n                    word = 'drank'\n                }\n                if(i == 9) {\n                    word = 'eaten'\n                }\n                this.text[4][i] = `${word} ${this.stats[k]} ${k}`\n            }\n        }\n    }\n\n    /* ------------- Keyboard Code ------------- */\n    initKeyboard() {\n        this.kstate = {}\n\n        window.onkeyup = (e) => {\n            this.kstate[e.keyCode] = false\n        }\n\n        window.onkeydown = (e) => {\n            this.kstate[e.keyCode] = true\n        }\n    }\n\n    checkKey(e) {\n        return this.kstate[e]\n    }\n\n    updateKeys() {\n        \n        let a = null\n        let b = null\n\n        if(this.checkKey(37) || this.checkKey(65)) {\n            a = -15\n        }\n        if(this.checkKey(39) || this.checkKey(68)) {\n            a = 15\n        }\n        if(this.checkKey(38) || this.checkKey(87)) {\n            b = -15\n        }\n        if(this.checkKey(40) || this.checkKey(83)) {\n            b = 15\n        }\n\n        this.giant.lefthand.move(a, b, 30 + randomint(0, 20))\n    }\n\n    /* ------------- Gamepad code -------------- */\n\n    moveHands(a, b, c, d) {\n        this.giant.lefthand.move(a,b)\n        this.giant.righthand.move(c,d)\n    }\n\n    convertValue(value) {\n        //console.log(value)\n        let r = 0\n        if(value > 0.2) {\n            r = 6\n        }\n        if(value > 0.5) {\n            r = 12\n        }\n        if(value > 0.9) {\n            r = 24\n        }\n\n        if(value < -0.2) {\n            r = -6\n        }\n        if(value < -0.5) {\n            r = -12\n        }\n        if(value < -0.9) {\n            r = -24\n        }\n        return r\n    }\n\n    processGamePadInput(axis, value) {\n        let lx_inc = null\n        let ly_inc = null\n        let rx_inc = null\n        let ry_inc = null\n\n        switch(axis) {\n            case 0:\n                lx_inc = this.convertValue(value)\n            break;\n            case 1:\n                ly_inc = this.convertValue(value)\n            break;\n            case 2:\n                rx_inc = this.convertValue(value)\n            break;\n            case 3:\n                ry_inc = this.convertValue(value)\n            break;\n        }\n        this.moveHands(lx_inc, ly_inc, rx_inc, ry_inc)\n    }\n\n    checkGamePads() {\n        let gamepads = navigator.getGamepads()\n        // firefox returns an autoupdating array, chrome returns an object\n        // firefox also does something funky with axes mapping :o\n        if(!Array.isArray(gamepads)) {\n            this.gamepads = gamepads\n        }\n        let keys = Object.keys(this.gamepads)\n        keys.forEach(k => {\n            let controller = this.gamepads[k]\n            if(controller !== null) {\n                if(controller.axes) {\n                    for(let i = 0; i < controller.axes.length; i++) {\n                        let v = controller.axes[i]\n                        if(controller.axes[i].value) {\n                            v = controller.axes[i].value\n                        }\n                        this.processGamePadInput(i, v)\n                    }\n                }\n            }\n        })\n    }\n\n    gamepadHandler(e,c) {\n        const gamepad = e.gamepad\n        const i = gamepad.index\n        try {\n            if (c) {\n                this.gamepads[i] = gamepad\n            } else {\n                delete this.gamepads[i]\n            } \n        } catch(e) {\n            // naughty\n        }\n    }\n\n    initGamepad() {\n        let self = this\n        if(!!navigator.getGamepads){\n            window.addEventListener(\"gamepadconnected\", (e) => { self.gamepadHandler(e, true) }, false)\n            window.addEventListener(\"gamepaddisconnected\", (e) => { self.gamepadHandler(e, false) }, false)\n        }\n    }\n\n    /** --------------------------\n     * \n     * data loading code \n     * \n     * --------------------------- */\n    start() {\n        vg.setPalette(palette)\n\n        let d = data\n        for(let i = 0; i < d.length; i += 3) {\n            let w = d[i]\n            let h = d[i + 1]\n            let r = d[i + 2]\n\n            let [img, cv] = this.createCanvas(w,h)\n            vg.vgrender(img, r)\n            this.imgs.push(cv)\n        }\n\n        // swap some colours so we can generate extra sprites\n        this.colourSwapSprites.forEach(cswap => {\n            let index = cswap[0] * 3\n            for(let w = 1; w < cswap.length; w += 2) {\n                vg.replaceColour(cswap[w], cswap[w + 1])\n            }\n            let width = d[index]\n            let height = d[index + 1]\n            let r = d[index + 2]\n            this.imgs.push(this.createSprite(r, width, height))\n\n            // reset the pallette to original\n            vg.setPalette(palette)\n        });\n\n        // generate the bridge sprite\n        this.imgs.push(this.genBridge(this.imgs[24]))\n\n        // we also need to generate some background tree blobs\n        let i = 17 * 3\n        let w = data[i]\n        let h = data[i + 1]\n        let r = data[i + 2]\n\n        // lazy solution, we just wreck our entire pallete.\n        // no extra code required in mv.js this way\n        // grab a copy of this colour before we overwrite it ;)\n        let col = palette[30]\n        this.config.tree1 = this.singleColourSprite(palette[31], r, w, h)\n        this.config.tree2 = this.singleColourSprite(col, r, w, h)\n        this.config.tree3 = this.singleColourSprite('#077', r, w, h)\n\n        // and then draw the tree five times or so\n        this.config.tree1 = this.genBGTile(this.config.tree1)\n        this.config.tree2 = this.genBGTile(this.config.tree2)\n\n        this.state = GAMESTATE.TITLE\n        this.init()\n    }\n\n    createSprite(r, w, h) {\n        let [img, cv] = this.createCanvas(w,h)\n        vg.vgrender(img, r)\n        return cv\n    }\n\n    singleColourSprite(colour, r, w, h) {\n        vg.setPalette(this.overrideColour(palette, colour))\n        return this.createSprite(r, w, h)\n    }\n\n    genBridge(bpiece) {\n        let [img, cv] = this.createCanvas(484, 44)\n        for(let a = 0; a < 10; a++) {\n            drawImage(img, bpiece, a * 48, 0, bpiece.width, bpiece.height)\n        }\n        return cv\n    }\n\n    genBGTile(tree) {\n        let [img, cv] = this.createCanvas(76*5, 300)\n        for(let b = 0; b < 4; b++) {\n            for(let a = 0; a < 6; a++) {\n                let r = randomint(0,50)\n                drawImage(img, tree, a * 60, (b * 50) + r, 76, 236)\n            }\n        }\n        return cv\n    }\n\n    overrideColour(list, value) {\n        for(let i = 0; i < list.length; i++) {\n            list[i] = value\n        }\n        return list\n    }\n\n    createCanvas(w,h) {\n        let bf = document.createElement('canvas')\n        bf.width = w\n        bf.height = h\n        let bc = bf.getContext('2d')\n        // Don't you dare AntiAlias the pixelart!\n        // bc.imageSmoothingEnabled = bc.mozImageSmoothingEnabled = bc.webkitImageSmoothingEnabled = false\n\n        // we need both. We draw our stuff on the 2d context for this canvas,\n        // and in turn we pass the canvas element when we want to draw our stuff on another canvas\n        return [bc, bf]\n    }\n}\n\nexport default PlayState\n","//import LoadingState from './classes/loadingstate.js'\nimport PlayState from './classes/playstate.js'\n\n(function() {\n    'use strict'\n\n    // start game when page has finished loading\n    window.addEventListener('load', function() {\n        const canvas = document.getElementById('c')\n        const ctx = canvas.getContext('2d')\n        const WIDTH = 1366\n        const HEIGHT = 768\n\n        let currentState = new PlayState()\n        //currentState.init()\n        /* let pause = false\n        let fadeOut = false\n        let fadeIn = false\n        let next = null\n        let config = null\n        let imgs = []\n        let inc = 0.0\n        let alpha = 0*/\n        \n        /* let now = () => {\n            return new Date().getTime()\n        } */\n\n        //let ts = now()\n\n        let cls = () => {\n            ctx.clearRect(0, 0, WIDTH, HEIGHT)\n        }\n\n        // setup miece listeners \n        let initMouse = (c) => {\n            c.addEventListener('click', e => {\n                let r = c.getBoundingClientRect()\n                let x = e.clientX - r.left\n                let y = e.clientY - r.top\n                currentState.processClick(x, y)\n            }, false)\n    \n            c.addEventListener('mousemove', e => {\n                let r = c.getBoundingClientRect()\n                let x = e.clientX - r.left\n                let y = e.clientY - r.top\n                currentState.processMove(x, y)\n            }, false)\n        }\n\n        // a bit of code to handle nice state transitions - fade in and out effect\n        /*let skip = 7\n\n        let startFadeIn = () => {\n            fadeIn = true\n            fadeOut = false\n            alpha = 1.0\n            inc = -0.025\n            pause = true\n            ts = now() + skip\n        }*/\n\n        /*let startFadeOut = () => {\n            fadeOut = true\n            fadeIn = false\n            alpha = 0.0\n            inc = 0.025\n            ts = now() + skip\n        }\n\n        let processFade = () => {\n            cls()\n            // render whatever the last view was\n            currentState.render(ctx)\n            // and then draw a great big black box over it\n            ctx.fillStyle = '#000'\n            // update the alpha for the box to get the transition effect\n            ctx.globalAlpha = alpha\n            ctx.fillRect(0, 0, WIDTH, HEIGHT)\n            // don't update the alpha too often\n            if(now() > ts) {\n                alpha += inc\n                ts = now() + skip\n            }\n            // check if the fade is completed\n            if(fadeOut && alpha > 1.0) {\n                nextState()\n            }\n            if(fadeIn && alpha < 0.0) {\n                fadeIn = false\n                pause = false\n            }\n        }*/\n\n        // this invokes the next state class\n        //let nextState = () => {\n            //console.log('Next is', next)\n            //switch(next) {\n              //  case 'play':\n                //    currentState = new PlayState(config, imgs)\n                //break\n            //}\n            // dynamic invocation just won't work - webpack omits the class, and rollup mangles the name\n            /*try {\n                currentState = (Function('return new ' + next))()\n            } catch(e) {\n                currentState = new this[next]()\n            }*/\n            //currentState.init()\n            //startFadeIn()\n        //}\n\n        // the main loop\n        let tick = () => {\n            //ctx.globalAlpha = 1.0\n            //if(!pause) {\n            currentState.update()\n            cls()\n            currentState.render(ctx)\n            //}\n            /*if(fadeOut || fadeIn) {\n                processFade()\n            }*/\n            requestAnimationFrame(tick)\n        }\n\n        // nicely transition to next state when we get a ns signal\n        /*\n        window.addEventListener('ns', e => {\n            currentState.finish()\n            next = e.detail.n\n            config = e.detail.c\n            imgs = e.detail.i\n            startFadeOut()\n        }, false)*/\n\n        // start the main loop\n        initMouse(canvas)\n        currentState.start()\n        tick()\n    })\n})()"],"names":["STATE","vg.setPalette","vg.vgrender","vg.replaceColour"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
{"version":3,"file":"main.js","sources":["src/classes/state.js","src/classes/util.js","src/classes/mv.js","src/classes/data.js","src/classes/loadingstate.js","src/classes/sound.js","src/classes/button.js","src/classes/titlestate.js","src/classes/head.js","src/classes/grabber.js","src/classes/hand.js","src/classes/giant.js","src/classes/grab.js","src/classes/beer.js","src/classes/van.js","src/classes/house.js","src/classes/thing.js","src/classes/playstate.js","src/classes/cam.js","src/classes/colourtracker.js","src/classes/calibratestate.js","src/classes/storystate.js","src/index.js"],"sourcesContent":["class State {\n    constructor(c, imgs) {\n        this.config = c\n        this.imgs = imgs\n    }\n\n    init() {}\n\n    render() {}\n\n    update() {}\n\n    finish() {}\n\n    next(name){\n        const e = new CustomEvent('ns', { detail: { 'n': name, 'c': this.config, 'i': this.imgs }})\n        window.dispatchEvent(e)\n    }\n\n    processClick(mx, my) {\n        mx = Math.floor(mx)\n        my = Math.floor(my)\n        this.handleClick(mx, my)\n    }\n\n    processMove(mx, my, c) {\n        mx = Math.floor(mx)\n        my = Math.floor(my)\n        this.handleMove(mx, my, c)\n    }\n\n    handleMove(mx, my, c) {}\n\n    handleClick(mx, my) {}\n}\n\nexport default State\n","const WIDTH = 1366\nconst HEIGHT = 768\n\nlet rect = (c, col, x, y, w, h) => {\n    c.fillStyle = col\n    c.fillRect(x, y, w, h)\n}\n\nlet fsrect = (c, col) => {\n    rect(c, col, 0, 0, WIDTH, HEIGHT)\n}\n\nlet contains = (xa, ya, xb, yb, w, h) => {\n    return xa >= xb && xa <= xb + w &&\n           ya >= yb && ya <= yb + h\n}\n\nlet getIntersectingRectangle = (r1, r2) => {  \n    [r1, r2] = [r1, r2].map(r => {\n        return {x: [r.x1, r.x2].sort(), y: [r.y1, r.y2].sort()}\n    })\n  \n    const noIntersect = r2.x[0] > r1.x[1] || r2.x[1] < r1.x[0] ||\n                        r2.y[0] > r1.y[1] || r2.y[1] < r1.y[0]\n  \n    return noIntersect ? false : {\n        x1: Math.max(r1.x[0], r2.x[0]), // _[0] is the lesser,\n        y1: Math.max(r1.y[0], r2.y[0]), // _[1] is the greater\n        x2: Math.min(r1.x[1], r2.x[1]),\n        y2: Math.min(r1.y[1], r2.y[1])\n    }\n}\n\n// returns a percentage overlap\nlet overlaps = (ax, ay, aw, ah, bx, by, bw, bh) => {\n    let a = {x1: ax, y1: ay, x2: ax + aw, y2: ay + ah}\n    let b = {x1: bx, y1: by, x2: bx + bw, y2: by + bh}\n    let r = getIntersectingRectangle(a, b)\n    \n    if(!r) {\n        return 0.0\n    } else {\n        let bsize = Math.abs((bw * bh) / 100.0)\n        let rsize = Math.abs((r.x2 - r.x1) * (r.y2 - r.y1))\n        if(rsize > 0.0 && bsize > 0.0) {\n            return rsize / bsize\n        }\n        return 0.0\n    }\n}\n\nlet text = (c, t, x, y, col, size) => {\n    if(size) {\n        c.font = 'bold ' + size + 'px Arial'\n    }\n    c.fillStyle = col\n    c.fillText(t, x, y)\n}\n\nlet drawImage = (ctx, img, x, y, width, height, deg, flip, flop, center) => {\n    ctx.save()\n\n    if(typeof width === \"undefined\") width = img.width\n    if(typeof height === \"undefined\") height = img.height\n    if(typeof center === \"undefined\") center = false\n\n    // Set rotation point to center of image, instead of top/left\n    if(center) {\n        x -= width/2\n        y -= height/2\n    }\n\n    // Set the origin to the center of the image\n    ctx.translate(x + width/2, y + height/2)\n\n    // Rotate the canvas around the origin\n    const rad = 2 * Math.PI - deg * Math.PI / 180\n    ctx.rotate(rad)\n\n    let flipScale = 0\n    let flopScale = 0\n\n    // Flip/flop the canvas\n    if(flip) {\n        flipScale = -1 \n    } else {\n        flipScale = 1\n    }\n    if(flop) {\n        flopScale = -1\n    } else {\n         flopScale = 1\n    }\n    ctx.scale(flipScale, flopScale)\n\n    // Draw the image\n    ctx.drawImage(img, -width/2, -height/2, width, height)\n    ctx.restore()\n}\n\nlet timestamp = () => {\n    return new Date().getTime()\n}\n\nlet randomint = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst rad = (d) => {\n    return (Math.PI/180)*d\n}\n\nexport { rec, fsrect, contains, text, drawImage, overlaps, timestamp, randomint, rad }","import { rad } from './util.js'\n\nlet colours = []\n\nlet ctx = null\n\nconst r = {\n    // colour\n    'k': (l) => {\n        ctx.fillStyle = colours[l[0]];\n        ctx.strokeStyle = colours[l[0]];\n    },\n    // filled rectangle\n    'b': (l) => {\n        ctx.fillRect(l[0], l[1], l[2], l[3]);\n    },\n    // line\n    'd': (l) => {\n        ctx.beginPath();\n        ctx.moveTo(l[0],l[1]);\n        ctx.lineTo(l[2],l[3]);\n        ctx.stroke();\n    },\n    // filled polygon\n    'f': (l) => {\n        ctx.beginPath();\n        ctx.moveTo(l[0],l[1]);\n        for(let i = 2; i < l.length; i += 2) {\n            ctx.lineTo(l[i], l[i + 1]);\n        }\n        ctx.fill();\n    },\n    // filled circle\n    'i': (l) => {\n        ctx.beginPath();\n        ctx.arc(l[0], l[1], l[2], 0, rad(360), 0);\n        ctx.fill();\n    },\n    // filled rounded rect\n    'n': (l) => {\n        roundRect(l[0], l[1], l[2], l[3], l[4], true);\n    }, \n    // line width\n    'o': (l) => {\n        ctx.lineWidth = l[0];\n    },\n    // filled arc\n    'a': (l) => {\n        ctx.beginPath();\n        ctx.arc(l[0], l[1], l[2], rad(l[3]), rad(l[4]), true);\n        ctx.fill();\n    },\n    // NOT USING THESE\n    /*\n    z: (l) => {\n        ctx.globalAlpha = l[0];\n    },\n    // stroke rectangle\n    a: (l) => {\n        ctx.strokeRect(l[0], l[1], l[2], l[3]);\n    },\n    // clear rectangle\n    c: (l) => {\n        ctx.clearRect(l[0], l[1], l[2], l[3]);\n    },\n    // stroke polygon\n    e: (l) => {\n        ctx.beginPath();\n        ctx.moveTo(l[0],l[1]);\n        for(let i = 2; i < l.length; i += 2) {\n            ctx.lineTo(l[i], l[i + 1]);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    },\n    // text\n    g: (l) => {\n        ctx.font = l[0] + 'px ' + fonts[l[1]];\n        ctx.fillText(texts(l[2]),l[3],l[4]);\n    },\n    // stroke circle\n    h: (l) => {\n        ctx.beginPath();\n        ctx.arc(l[0], l[1], l[2], 0, rad(360), 0);\n        ctx.stroke();\n    },\n    // stroke rounded rect\n    m: (l) => {\n        roundRect(l[0], l[1], l[2], l[3], l[4], false);\n    },\n    */\n};\n\n// rounded rectangle\nconst roundRect = (x, y, w, h, r, f) => {\n    let z = {tl: r, tr: r, br: r, bl: r}\n    ctx.beginPath()\n    ctx.moveTo(x + z.tl, y)\n    ctx.lineTo(x + w - z.tr, y)\n    ctx.quadraticCurveTo(x + w, y, x + w, y + z.tr)\n    ctx.lineTo(x + w, y + h - z.br)\n    ctx.quadraticCurveTo(x + w, y + h, x + w - z.br, y + h)\n    ctx.lineTo(x + z.bl, y + h)\n    ctx.quadraticCurveTo(x, y + h, x, y + h - z.bl)\n    ctx.lineTo(x, y + z.tl)\n    ctx.quadraticCurveTo(x, y, x + z.tl, y)\n    ctx.closePath()\n    if (f) {\n        ctx.fill()\n    } else {\n        ctx.stroke()\n    }\n}\n\nconst setPalette = (c) => {\n    colours = c\n}\n\nconst replaceColour = (index, colour) => {\n    let old = colours[index]\n    colours[index] = '#' + colour\n    return old\n}\n\nconst processCommands = (commands, flag, inc) => {\n    for(let i = 0; i < commands.length; i++){\n        let c = commands[i];\n        let l = c.split(',');\n        const f = l.shift();\n        if(f === 'x') {\n            if(parseInt(l[0]) > 0) {\n                // sub process, outline in black\n                processCommands([].concat(commands.slice(i + 1)), true, parseInt(l[0]));\n            } else {\n                // it's an x 0, bail out\n                if(flag) {\n                    return;\n                }\n            }\n            // always skip the x commands\n            continue;\n        }\n        // params\n        let p = l.map(Number);\n        // this generates the black outline\n        if(flag && inc > 0) {\n            switch(f) {\n                case 'k':\n                    p[0] = 0;\n                break;\n                case 'n':\n                case 'b':\n                    p[0] -= inc;\n                    p[1] -= inc;\n                    p[2] += inc * 2;\n                    p[3] += inc * 2;\n                break;\n                case 'a':\n                case 'i':\n                    p[2] += inc;\n                break;\n\n            }\n        }\n        //console.log(f, l[0]);\n        // there's a good chance you could replace a big chunk\n        // of this file by using this:\n        // let path = new Path2D('m100,100v50h50v-50')\n        // ctx.stroke(path)\n        //\n        r[f](p)\n    }\n}\n\n\nconst vgrender = (newctx, data) => {\n    //console.log('[' + data + ']');\n    let commands = data.split(/([a-z]\\,[\\d+\\,*]+)/).filter(s => s !== '')\n    //console.log(commands);\n    if(!commands) return\n    ctx = newctx\n    ctx.lineWidth = 1\n    processCommands(commands, false, 0)\n    return ctx\n};\n\n/*\nconst vgrender2 = (newctx, encoded_data) => {\n    let commands = encoded_data.split(/([a-z][^a-z]+)/).filter(s => s !== '')\n    // convert each number to something sensible\n    let newcommands = [];\n    commands.forEach(c => {\n        let l = c[0];\n        let nc = c.substr(1).split('').map(a=>{if(a.charCodeAt(0) > 100) return a.charCodeAt(0) - 128; else return a });\n        newcommands.push(l + ',' + nc.join(','))\n        console.log(l + ',' + nc.join(','));\n    });\n    if(!newcommands) return\n    ctx = newctx\n    ctx.lineWidth = 1\n    processCommands(newcommands, false, 0)\n    return ctx\n}\n*/\n\nexport { vgrender, setPalette, replaceColour };\n","// this is all the mini-svg data\n// format is: \n// w, h, data\nconst data = [\n    /** -------------------------------\n     * \n     *     Hans the Giant\n     * \n     * -------------------------------- */\n    // open eye\n    80,80,'x,2k,2i,41,41,37x,0', \n    // closed eye\n    80,80,'x,2k,3i,41,41,37x,0k,0o,2d,4,46,78,26d,8,46,78,41d,6,48,79,55',\n    // fist\n    272,175,'x,2k,3i,33,50,28n,4,44,54,122,20x,0k,2i,32,45,23k,3i,33,55,28k,6n,40,19,54,151,20x,2k,3i,74,40,32n,45,45,54,122,20x,0k,2i,73,38,29k,3i,72,43,29k,6n,89,17,54,151,20x,2k,3i,126,38,33n,94,37,62,129,20x,0k,2i,128,37,31k,3i,127,45,34k,6n,145,30,53,137,20x,2k,3n,156,27,91,124,20x,0x,2k,3i,183,41,30n,151,32,64,136,20x,0k,2i,184,41,29k,3i,183,48,31k,6i,215,107,33n,207,73,53,68,20x,2k,3i,220,103,33n,216,69,53,68,20x,0',\n    // nose 1\n    155,135,'k,4i,124,103,31i,76,106,31i,32,102,31x,2k,4i,122,91,31i,34,91,31x,0x,2k,6i,75,57,54i,75,99,27x,0k,2i,50,35,14',\n    // head 1\n    455,470,'x,2k,3i,52,216,50k,4i,48,219,45i,62,276,27x,0k,7n,67,151,108,156,20x,2k,3i,403,215,50k,4i,408,219,45i,396,275,27x,0k,7n,288,149,108,156,20x,2k,3i,200,434,32i,248,435,32i,230,160,157n,73,88,317,344,20x,0k,6i,360,322,5i,326,291,5i,356,267,5i,116,283,5k,7i,303,211,43i,145,214,43k,2i,173,48,22',\n    // body\n    570,500,'x,2k,11n,2,3,566,495,20k,9n,2,10,565,487,20x,0k,0o,2d,277,130,277,516k,10o,3d,279,124,280,522i,467,158,15i,484,234,29i,469,207,16i,428,310,7k,10i,281,167,28i,285,256,28i,285,350,28k,1f,152,51,282,166,441,40k,2f,164,53,282,160,426,44o,2k,0d,163,62,283,168d,436,45,280,169x,2k,14i,277,163,26k,13i,278,165,24x,0k,2i,265,147,3x,2k,14i,283,253,26k,13i,283,255,24x,0k,2i,274,236,3x,2k,14i,283,347,26k,13i,284,349,24x,0k,2i,272,330,3',\n    // eyebrow\n    105,40,'x,2k,5n,2,3,97,32,20x,0',\n    // hair 1\n    40,105,'x,2k,5n,2,2,36,97,20x,0',\n    // pupil 1 green\n    43,43,'k,8i,21,22,21k,0i,21,22,11k,2i,29,15,5',\n    // mouth grr\n    208,63,'x,2k,2n,2,2,203,53,20x,0o,2k,0d,188,247,395,247d,0,26,206,26',\n    // mouth open/ouch\n    10,10,'x,2k,2n,2,2,203,53,20x,0o,2k,0d,188,247,395,247d,0,26,206,26',\n    // mouth hmm\n    10,10,'x,2k,2n,2,2,203,53,20x,0o,2k,0d,188,247,395,247d,0,26,206,26',\n    \n    // chewing cheeks\n    10,10,'x,2k,2n,2,2,203,53,20x,0o,2k,0d,188,247,395,247d,0,26,206,26',\n\n    /** -------------------------------\n     * \n     *     Misc\n     * \n     * -------------------------------- */\n    // glass of beer - upright\n    320,445,'x,2k,2n,209,321,102,42,20n,210,123,102,42,20n,269,125,46,237,20x,0x,2k,2n,44,389,200,52,20k,0f,63,395,73,372,28,111,256,107,220,366,227,399k,2f,61,403,75,373,30,112,253,110,218,364,227,399x,0b,36,79,215,39k,13i,145,344,63i,141,123,91f,82,346,49,122,234,118,208,350k,2i,139,280,8i,114,205,5i,127,186,4i,118,151,3f,88,275,103,330,95,272,70,106,63,107f,182,340,163,389,195,348,226,110,198,103f,49,123,128,100,239,124,235,79,44,78x,2k,2i,48,108,29i,26,94,19i,76,83,19i,44,72,19i,72,59,19i,111,55,37i,123,93,19i,123,119,11i,153,65,25i,190,67,25i,220,80,19i,244,105,18i,242,79,18i,226,53,18i,202,35,18i,168,31,24i,135,32,24i,82,43,24i,55,52,24x,0',\n    // glass of beer - drinking\n    280,330,'x,2k,2i,30,54,23i,60,43,23i,93,31,23i,136,26,23i,156,49,23i,118,46,23i,171,71,23i,26,79,23x,0x,2k,2i,100,129,93x,0k,2f,9,137,24,261,179,260,193,137k,0o,2d,6,137,27,265d,194,138,176,264k,14i,99,129,76f,24,139,42,268,160,268,173,138k,2i,93,84,5i,117,119,5i,80,136,8x,2k,2n,177,98,95,39,20x,0x,2k,2n,236,98,39,118,20x,0x,2k,2n,174,182,102,39,20x,0x,2k,2i,99,233,96x,0k,14i,100,232,79k,13a,101,234,78,180,0k,2i,65,277,7i,114,255,4i,107,283,4',\n    // glass empty\n    320,445,'x,2k,2n,209,321,102,42,20n,210,123,102,42,20n,269,125,46,237,20x,0x,2k,2n,44,389,200,52,20k,0f,63,395,73,372,28,111,256,107,220,366,227,399k,2b,31,79,222,37f,61,403,75,373,30,112,254,108,218,364,227,399x,0b,36,79,215,39k,15i,145,344,63f,82,346,40,96,243,96,208,350k,2f,182,340,163,389,195,348,231,91,198,91',\n\n    /** -------------------------------\n     * \n     *     Level data\n     * \n     * -------------------------------- */\n     // cloud\n     320,225,'k,2i,148,62,50i,217,52,50i,270,95,50i,234,159,50i,146,159,65i,59,149,53i,106,97,53i,197,107,53',\n     // tree\n     153,473,'x,2k,24b,56,277,28,194x,0x,2k,25i,91,254,53i,98,183,53i,94,119,53i,85,60,35i,66,24,22i,58,275,51i,54,207,51i,56,129,51i,56,70,36x,0k,26i,88,256,53i,61,273,53i,56,208,53i,59,129,53i,89,121,53i,94,184,53i,86,60,30i,64,26,21i,53,69,33',\n     // ground block\n     100,104,'k,18b,0,4,100,100k,19i,25,55,5i,17,71,2i,45,46,5i,71,77,3i,46,73,5i,92,64,2i,76,51,2k,20b,0,4,100,13k,0b,0,0,100,12k,22b,0,2,100,8k,23b,0,2,100,3',\n     // van\n     220,105,'x,2k,2n,4,2,180,3,2k,29n,37,99,119,4,2k,28n,5,7,179,91,5f,185,6,167,98,205,98,206,59x,0k,27b,5,54,200,9k,0o,2d,205,60,184,3d,207,57,207,93x,2k,2i,201,62,6k,29n,187,77,20,24,5n,2,77,13,23,5k,17n,4,58,11,13,5x,0k,14n,12,12,104,38,5x,2k,29a,153,98,24,0,180a,45,98,24,0,180k,16n,130,12,45,36,5x,0k,0f,180,51,179,8,195,49k,16f,181,48,180,10,194,48k,0o,2d,195,51,180,9',\n     // van wheel\n     44,44,'k,0i,22,22,22k,12i,23,22,10k,21i,23,6,3',\n     // grass\n     30,40,'k,8f,2,3,1,37,14,33f,16,1,8,37,19,33f,28,6,13,34,25,34k,0o,2d,2,3,11,23d,2,3,1,40d,16,0,10,25d,16,0,19,26d,28,3,19,26d,28,3,26,37',\n     // house\n     255,375,'x,2k,17n,2,2,251,98,20k,2b,2,15,251,272k,21b,2,269,251,100x,0x,2k,19n,19,150,61,109,10x,2k,12i,69,212,3k,16n,97,149,143,58,10n,97,42,60,58,10n,19,42,60,58,10n,97,41,60,58,10n,180,41,60,58,10k,1b,14,257,70,10x,0k,21b,1,15,252,5k,15b,108,149,12,58b,188,42,12,56b,106,42,12,58b,27,42,12,58k,3b,11,2,233,3k,0o,2d,1,14,254,14',\n     // tractor\n     210,152,'k,0n,54,37,8,44,2x,2k,27b,101,6,79,63n,17,62,177,57,20x,0x,2k,21n,49,116,85,3,4n,40,72,48,24,5a,166,119,50,325,190k,1b,141,13,35,46x,0k,0i,28,125,27i,165,114,39o,2d,117,109,209,90k,13i,165,114,18i,28,125,13x,2k,2i,18,82,5k,2n,98,2,85,4,4x,0k,27f,103,8,88,69,112,69k,0f,137,13,137,62,116,71,96,71,106,14k,1f,136,15,136,58,118,69,97,69,108,16k,0o,2d,102,9,89,67'\n]\n\nconst palette = [\n    '#000',\n    '#ccc',\n    '#fff',\n    '#ffd5d5', // pink skin,\n    '#faa', // dark pink skin\n    '#c83737', // hair - alts for these: \n    '#ff9191', // nose,\n    '#ff8080', // hands,\n    '#080',    // eyes / plants - alt: 8c83ff\n    '#a6cda6', // body\n    '#85ba85', // stains\n    '#e6f1e6', // shoulders,\n    '#fd5', // ring\n    '#ffe381', // button / beer\n    '#fff6d5', // button highlight / beer\n    '#d5f6ff', // empty glass\n    '#aef', // window blue\n    '#ff2a2a', // red\n    '#830', // brown door/ground\n    '#a40', // brown highlight\n    '#520', // brown shadow\n    '#666',    // dark gray\n    '#59eb59', // ground grass\n    '#a2f4a2', // ground grass highlight\n    '#d38d5f', // tree trunk\n    '#abc837', // tree highlight\n    '#677821', // tree green\n    '#3c3cff', // tractor/van\n    '#f60'   , // orange\n    '#4d4d4d', // dark dark gray\n    '#009a9a', // bg trees 1\n    '#00cbcb', // bg trees 2\n]\n\nexport { \n    data, \n    palette\n}","import State from './state.js'\nimport * as util from './util.js'\nimport * as vg from './mv.js'\nimport { data, palette } from './data.js'\n\nclass LoadingState extends State {\n    constructor(c) {\n        super(c, [])\n        this.progress = 0\n        this.imgs = []\n\n        this.colourSwapSprites = [\n            // number, colours to swap [ index, hex ]\n            // van\n            // 27 - stripe\n            // 28 - van itself\n            // 14 - panel\n            [ 19, 27, '2c84a6', 28, '8ce724', 14, 'ee360d'], // 24 mystery van\n            [ 19, 27, 'fff', 28, 'fff', 14, 'fff'],          // 25 white van\n            [ 19, 27, '000', 28, 'ccc', 14, 'fff'],          // 26 grey van\n            [ 19, 27, 'fff', 28, 'f00', 14, 'fff'],          // 27 red van\n            // tractor\n            // 12 - tyre hubs\n            // 14 - tractor itself\n            // 2 - roof\n            [ 23, 27, 'f00' ], // 28 red\n            [ 23, 27, '648e06', 12, '648e06' ], // 29 - farm green\n            // house\n            // 19 - door\n            // 2 - house\n            // roof - 17\n            // roof highlight - 3\n            // porch - 1\n            [ 22, 19, '0055d4', 2, 'ffd5d5', 17, '0055d4', 3, 'acf', 1, 'fff' ], // 30 pink house\n            [ 22, 19, '080', 2, 'deaa87', 17, '080', 3, 'afa', 1, 'fff' ] // 31 brown house\n        ]\n    }\n\n    init() {\n        vg.setPalette(palette)\n\n        let d = data\n        let inc = 100.0 / (d.length / 3)\n        for(let i = 0; i < d.length; i += 3) {\n            let w = d[i]\n            let h = d[i + 1]\n            let r = d[i + 2]\n\n            let [img, cv] = this.createCanvas(w,h)\n            vg.vgrender(img, r)\n            this.imgs.push(cv)\n            this.progress += inc\n        }\n\n        // swap some colours so we can generate extra sprites\n        this.colourSwapSprites.forEach(cswap => {\n            let index = cswap[0] * 3\n            for(let w = 1; w < cswap.length; w += 2) {\n                vg.replaceColour(cswap[w], cswap[w + 1])\n            }\n            let width = d[index]\n            let height = d[index + 1]\n            let r = d[index + 2]\n            this.imgs.push(this.createSprite(r, width, height))\n\n            // reset the pallette to original\n            vg.setPalette(palette)\n        });\n\n        // we also need to generate some background tree blobs\n        let i = 17 * 3\n        let w = data[i]\n        let h = data[i + 1]\n        let r = data[i + 2]\n\n        // lazy solution, we just wreck our entire pallete.\n        // no extra code required in mv.js this way\n        // grab a copy of this colour before we overwrite it ;)\n        let col = palette[30]\n        this.config.tree1 = this.singleColourSprite(palette[31], r, w, h)\n        this.config.tree2 = this.singleColourSprite(col, r, w, h)\n        \n        // and then draw the tree five times or so\n        this.config.tree1 = this.genBGTile(this.config.tree1)\n        this.config.tree2 = this.genBGTile(this.config.tree2)\n\n        this.next('titl')\n    }\n\n    createSprite(r, w, h) {\n        let [img, cv] = this.createCanvas(w,h)\n        vg.vgrender(img, r)\n        return cv\n    }\n\n    singleColourSprite(colour, r, w, h) {\n        vg.setPalette(this.overrideColour(palette, colour))\n        return this.createSprite(r, w, h)\n    }\n\n    genBGTile(tree) {\n        let [img, cv] = this.createCanvas(76*5, 300)\n        for(let b = 0; b < 4; b++) {\n            for(let a = 0; a < 6; a++) {\n                let r = util.randomint(0,50)\n                util.drawImage(img, tree, a * 60, (b * 50) + r, 76, 236)\n            }\n        }\n        return cv\n    }\n\n    overrideColour(list, value) {\n        for(let i = 0; i < list.length; i++) {\n            list[i] = value\n        }\n        return list\n    }\n\n    createCanvas(w,h) {\n        let bf = document.createElement('canvas')\n        bf.width = w\n        bf.height = h\n        let bc = bf.getContext('2d')\n        // Don't you dare AntiAlias the pixelart!\n        // bc.imageSmoothingEnabled = bc.mozImageSmoothingEnabled = bc.webkitImageSmoothingEnabled = false\n\n        // we need both. We draw our stuff on the 2d context for this canvas,\n        // and in turn we pass the canvas element when we want to draw our stuff on another canvas\n        return [bc, bf]\n    }\n\n    render(ctx) {\n        util.fsrect(ctx, '#892ca0')\n        util.text(ctx, `Loading -- ${Math.round(this.progress)}%`, 1366/2 - 120, 768/2, '#fff', 32)\n\n        //let c = 0\n        //this.config.imgs.forEach(i => {\n            //ctx.drawImage(i, c, 0)\n            //c += 100\n        //})\n    }\n}\n\nexport default LoadingState\n","/**\n * SfxrParams\n *\n * Copyright 2010 Thomas Vian\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author Thomas Vian\n */\n/** @constructor */\n\nlet jsfxr = {}\n\nfunction SfxrParams() {\n    //--------------------------------------------------------------------------\n    //\n    //  Settings String Methods\n    //\n    //--------------------------------------------------------------------------\n  \n    /**\n     * Parses a settings array into the parameters\n     * @param array Array of the settings values, where elements 0 - 23 are\n     *                a: waveType\n     *                b: attackTime\n     *                c: sustainTime\n     *                d: sustainPunch\n     *                e: decayTime\n     *                f: startFrequency\n     *                g: minFrequency\n     *                h: slide\n     *                i: deltaSlide\n     *                j: vibratoDepth\n     *                k: vibratoSpeed\n     *                l: changeAmount\n     *                m: changeSpeed\n     *                n: squareDuty\n     *                o: dutySweep\n     *                p: repeatSpeed\n     *                q: phaserOffset\n     *                r: phaserSweep\n     *                s: lpFilterCutoff\n     *                t: lpFilterCutoffSweep\n     *                u: lpFilterResonance\n     *                v: hpFilterCutoff\n     *                w: hpFilterCutoffSweep\n     *                x: masterVolume\n     * @return If the string successfully parsed\n     */\n    this.setSettings = function(values)\n    {\n      for ( var i = 0; i < 24; i++ )\n      {\n        this[String.fromCharCode( 97 + i )] = values[i] || 0;\n      }\n  \n      // I moved this here from the reset(true) function\n      if (this['c'] < .01) {\n        this['c'] = .01;\n      }\n  \n      var totalTime = this['b'] + this['c'] + this['e'];\n      if (totalTime < .18) {\n        var multiplier = .18 / totalTime;\n        this['b']  *= multiplier;\n        this['c'] *= multiplier;\n        this['e']   *= multiplier;\n      }\n    }\n  }\n  \n  /**\n   * SfxrSynth\n   *\n   * Copyright 2010 Thomas Vian\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * @author Thomas Vian\n   */\n  /** @constructor */\n  function SfxrSynth() {\n    // All variables are kept alive through function closures\n  \n    //--------------------------------------------------------------------------\n    //\n    //  Sound Parameters\n    //\n    //--------------------------------------------------------------------------\n  \n    this._params = new SfxrParams();  // Params instance\n  \n    //--------------------------------------------------------------------------\n    //\n    //  Synth Variables\n    //\n    //--------------------------------------------------------------------------\n  \n    var _envelopeLength0, // Length of the attack stage\n        _envelopeLength1, // Length of the sustain stage\n        _envelopeLength2, // Length of the decay stage\n  \n        _period,          // Period of the wave\n        _maxPeriod,       // Maximum period before sound stops (from minFrequency)\n  \n        _slide,           // Note slide\n        _deltaSlide,      // Change in slide\n  \n        _changeAmount,    // Amount to change the note by\n        _changeTime,      // Counter for the note change\n        _changeLimit,     // Once the time reaches this limit, the note changes\n  \n        _squareDuty,      // Offset of center switching point in the square wave\n        _dutySweep;       // Amount to change the duty by\n  \n    //--------------------------------------------------------------------------\n    //\n    //  Synth Methods\n    //\n    //--------------------------------------------------------------------------\n  \n    /**\n     * Resets the runing variables from the params\n     * Used once at the start (total reset) and for the repeat effect (partial reset)\n     */\n    this.reset = function() {\n      // Shorter reference\n      var p = this._params;\n  \n      _period       = 100 / (p['f'] * p['f'] + .001);\n      _maxPeriod    = 100 / (p['g']   * p['g']   + .001);\n  \n      _slide        = 1 - p['h'] * p['h'] * p['h'] * .01;\n      _deltaSlide   = -p['i'] * p['i'] * p['i'] * .000001;\n  \n      if (!p['a']) {\n        _squareDuty = .5 - p['n'] / 2;\n        _dutySweep  = -p['o'] * .00005;\n      }\n  \n      _changeAmount =  1 + p['l'] * p['l'] * (p['l'] > 0 ? -.9 : 10);\n      _changeTime   = 0;\n      _changeLimit  = p['m'] == 1 ? 0 : (1 - p['m']) * (1 - p['m']) * 20000 + 32;\n    }\n  \n    // I split the reset() function into two functions for better readability\n    this.totalReset = function() {\n      this.reset();\n  \n      // Shorter reference\n      var p = this._params;\n  \n      // Calculating the length is all that remained here, everything else moved somewhere\n      _envelopeLength0 = p['b']  * p['b']  * 100000;\n      _envelopeLength1 = p['c'] * p['c'] * 100000;\n      _envelopeLength2 = p['e']   * p['e']   * 100000 + 12;\n      // Full length of the volume envelop (and therefore sound)\n      // Make sure the length can be divided by 3 so we will not need the padding \"==\" after base64 encode\n      return ((_envelopeLength0 + _envelopeLength1 + _envelopeLength2) / 3 | 0) * 3;\n    }\n  \n    /**\n     * Writes the wave to the supplied buffer ByteArray\n     * @param buffer A ByteArray to write the wave to\n     * @return If the wave is finished\n     */\n    this.synthWave = function(buffer, length) {\n      // Shorter reference\n      var p = this._params;\n  \n      // If the filters are active\n      var _filters = p['s'] != 1 || p['v'],\n          // Cutoff multiplier which adjusts the amount the wave position can move\n          _hpFilterCutoff = p['v'] * p['v'] * .1,\n          // Speed of the high-pass cutoff multiplier\n          _hpFilterDeltaCutoff = 1 + p['w'] * .0003,\n          // Cutoff multiplier which adjusts the amount the wave position can move\n          _lpFilterCutoff = p['s'] * p['s'] * p['s'] * .1,\n          // Speed of the low-pass cutoff multiplier\n          _lpFilterDeltaCutoff = 1 + p['t'] * .0001,\n          // If the low pass filter is active\n          _lpFilterOn = p['s'] != 1,\n          // masterVolume * masterVolume (for quick calculations)\n          _masterVolume = p['x'] * p['x'],\n          // Minimum frequency before stopping\n          _minFreqency = p['g'],\n          // If the phaser is active\n          _phaser = p['q'] || p['r'],\n          // Change in phase offset\n          _phaserDeltaOffset = p['r'] * p['r'] * p['r'] * .2,\n          // Phase offset for phaser effect\n          _phaserOffset = p['q'] * p['q'] * (p['q'] < 0 ? -1020 : 1020),\n          // Once the time reaches this limit, some of the    iables are reset\n          _repeatLimit = p['p'] ? ((1 - p['p']) * (1 - p['p']) * 20000 | 0) + 32 : 0,\n          // The punch factor (louder at begining of sustain)\n          _sustainPunch = p['d'],\n          // Amount to change the period of the wave by at the peak of the vibrato wave\n          _vibratoAmplitude = p['j'] / 2,\n          // Speed at which the vibrato phase moves\n          _vibratoSpeed = p['k'] * p['k'] * .01,\n          // The type of wave to generate\n          _waveType = p['a'];\n  \n      var _envelopeLength      = _envelopeLength0,     // Length of the current envelope stage\n          _envelopeOverLength0 = 1 / _envelopeLength0, // (for quick calculations)\n          _envelopeOverLength1 = 1 / _envelopeLength1, // (for quick calculations)\n          _envelopeOverLength2 = 1 / _envelopeLength2; // (for quick calculations)\n  \n      // Damping muliplier which restricts how fast the wave position can move\n      var _lpFilterDamping = 5 / (1 + p['u'] * p['u'] * 20) * (.01 + _lpFilterCutoff);\n      if (_lpFilterDamping > .8) {\n        _lpFilterDamping = .8;\n      }\n      _lpFilterDamping = 1 - _lpFilterDamping;\n  \n      var _finished = false,     // If the sound has finished\n          _envelopeStage    = 0, // Current stage of the envelope (attack, sustain, decay, end)\n          _envelopeTime     = 0, // Current time through current enelope stage\n          _envelopeVolume   = 0, // Current volume of the envelope\n          _hpFilterPos      = 0, // Adjusted wave position after high-pass filter\n          _lpFilterDeltaPos = 0, // Change in low-pass wave position, as allowed by the cutoff and damping\n          _lpFilterOldPos,       // Previous low-pass wave position\n          _lpFilterPos      = 0, // Adjusted wave position after low-pass filter\n          _periodTemp,           // Period modified by vibrato\n          _phase            = 0, // Phase through the wave\n          _phaserInt,            // Integer phaser offset, for bit maths\n          _phaserPos        = 0, // Position through the phaser buffer\n          _pos,                  // Phase expresed as a Number from 0-1, used for fast sin approx\n          _repeatTime       = 0, // Counter for the repeats\n          _sample,               // Sub-sample calculated 8 times per actual sample, averaged out to get the super sample\n          _superSample,          // Actual sample writen to the wave\n          _vibratoPhase     = 0; // Phase through the vibrato sine wave\n  \n      // Buffer of wave values used to create the out of phase second wave\n      var _phaserBuffer = new Array(1024),\n          // Buffer of random values used to generate noise\n          _noiseBuffer  = new Array(32);\n      for (var i = _phaserBuffer.length; i--; ) {\n        _phaserBuffer[i] = 0;\n      }\n      for (var i = _noiseBuffer.length; i--; ) {\n        _noiseBuffer[i] = Math.random() * 2 - 1;\n      }\n  \n      for (var i = 0; i < length; i++) {\n        if (_finished) {\n          return i;\n        }\n  \n        // Repeats every _repeatLimit times, partially resetting the sound parameters\n        if (_repeatLimit) {\n          if (++_repeatTime >= _repeatLimit) {\n            _repeatTime = 0;\n            this.reset();\n          }\n        }\n  \n        // If _changeLimit is reached, shifts the pitch\n        if (_changeLimit) {\n          if (++_changeTime >= _changeLimit) {\n            _changeLimit = 0;\n            _period *= _changeAmount;\n          }\n        }\n  \n        // Acccelerate and apply slide\n        _slide += _deltaSlide;\n        _period *= _slide;\n  \n        // Checks for frequency getting too low, and stops the sound if a minFrequency was set\n        if (_period > _maxPeriod) {\n          _period = _maxPeriod;\n          if (_minFreqency > 0) {\n            _finished = true;\n          }\n        }\n  \n        _periodTemp = _period;\n  \n        // Applies the vibrato effect\n        if (_vibratoAmplitude > 0) {\n          _vibratoPhase += _vibratoSpeed;\n          _periodTemp *= 1 + Math.sin(_vibratoPhase) * _vibratoAmplitude;\n        }\n  \n        _periodTemp |= 0;\n        if (_periodTemp < 8) {\n          _periodTemp = 8;\n        }\n  \n        // Sweeps the square duty\n        if (!_waveType) {\n          _squareDuty += _dutySweep;\n          if (_squareDuty < 0) {\n            _squareDuty = 0;\n          } else if (_squareDuty > .5) {\n            _squareDuty = .5;\n          }\n        }\n  \n        // Moves through the different stages of the volume envelope\n        if (++_envelopeTime > _envelopeLength) {\n          _envelopeTime = 0;\n  \n          switch (++_envelopeStage)  {\n            case 1:\n              _envelopeLength = _envelopeLength1;\n              break;\n            case 2:\n              _envelopeLength = _envelopeLength2;\n          }\n        }\n  \n        // Sets the volume based on the position in the envelope\n        switch (_envelopeStage) {\n          case 0:\n            _envelopeVolume = _envelopeTime * _envelopeOverLength0;\n            break;\n          case 1:\n            _envelopeVolume = 1 + (1 - _envelopeTime * _envelopeOverLength1) * 2 * _sustainPunch;\n            break;\n          case 2:\n            _envelopeVolume = 1 - _envelopeTime * _envelopeOverLength2;\n            break;\n          case 3:\n            _envelopeVolume = 0;\n            _finished = true;\n        }\n  \n        // Moves the phaser offset\n        if (_phaser) {\n          _phaserOffset += _phaserDeltaOffset;\n          _phaserInt = _phaserOffset | 0;\n          if (_phaserInt < 0) {\n            _phaserInt = -_phaserInt;\n          } else if (_phaserInt > 1023) {\n            _phaserInt = 1023;\n          }\n        }\n  \n        // Moves the high-pass filter cutoff\n        if (_filters && _hpFilterDeltaCutoff) {\n          _hpFilterCutoff *= _hpFilterDeltaCutoff;\n          if (_hpFilterCutoff < .00001) {\n            _hpFilterCutoff = .00001;\n          } else if (_hpFilterCutoff > .1) {\n            _hpFilterCutoff = .1;\n          }\n        }\n  \n        _superSample = 0;\n        for (var j = 8; j--; ) {\n          // Cycles through the period\n          _phase++;\n          if (_phase >= _periodTemp) {\n            _phase %= _periodTemp;\n  \n            // Generates new random noise for this period\n            if (_waveType == 3) {\n              for (var n = _noiseBuffer.length; n--; ) {\n                _noiseBuffer[n] = Math.random() * 2 - 1;\n              }\n            }\n          }\n  \n          // Gets the sample from the oscillator\n          switch (_waveType) {\n            case 0: // Square wave\n              _sample = ((_phase / _periodTemp) < _squareDuty) ? .5 : -.5;\n              break;\n            case 1: // Saw wave\n              _sample = 1 - _phase / _periodTemp * 2;\n              break;\n            case 2: // Sine wave (fast and accurate approx)\n              _pos = _phase / _periodTemp;\n              _pos = (_pos > .5 ? _pos - 1 : _pos) * 6.28318531;\n              _sample = 1.27323954 * _pos + .405284735 * _pos * _pos * (_pos < 0 ? 1 : -1);\n              _sample = .225 * ((_sample < 0 ? -1 : 1) * _sample * _sample  - _sample) + _sample;\n              break;\n            case 3: // Noise\n              _sample = _noiseBuffer[Math.abs(_phase * 32 / _periodTemp | 0)];\n          }\n  \n          // Applies the low and high pass filters\n          if (_filters) {\n            _lpFilterOldPos = _lpFilterPos;\n            _lpFilterCutoff *= _lpFilterDeltaCutoff;\n            if (_lpFilterCutoff < 0) {\n              _lpFilterCutoff = 0;\n            } else if (_lpFilterCutoff > .1) {\n              _lpFilterCutoff = .1;\n            }\n  \n            if (_lpFilterOn) {\n              _lpFilterDeltaPos += (_sample - _lpFilterPos) * _lpFilterCutoff;\n              _lpFilterDeltaPos *= _lpFilterDamping;\n            } else {\n              _lpFilterPos = _sample;\n              _lpFilterDeltaPos = 0;\n            }\n  \n            _lpFilterPos += _lpFilterDeltaPos;\n  \n            _hpFilterPos += _lpFilterPos - _lpFilterOldPos;\n            _hpFilterPos *= 1 - _hpFilterCutoff;\n            _sample = _hpFilterPos;\n          }\n  \n          // Applies the phaser effect\n          if (_phaser) {\n            _phaserBuffer[_phaserPos % 1024] = _sample;\n            _sample += _phaserBuffer[(_phaserPos - _phaserInt + 1024) % 1024];\n            _phaserPos++;\n          }\n  \n          _superSample += _sample;\n        }\n  \n        // Averages out the super samples and applies volumes\n        _superSample *= .125 * _envelopeVolume * _masterVolume;\n  \n        // Clipping if too loud\n        buffer[i] = _superSample >= 1 ? 32767 : _superSample <= -1 ? -32768 : _superSample * 32767 | 0;\n      }\n  \n      return length;\n    }\n  }\n  \n  // Adapted from http://codebase.es/riffwave/\n  var synth = new SfxrSynth();\n  // Export for the Closure Compiler\n  jsfxr = function(settings) {\n    // Initialize SfxrParams\n    synth._params.setSettings(settings);\n    // Synthesize Wave\n    var envelopeFullLength = synth.totalReset();\n    var data = new Uint8Array(((envelopeFullLength + 1) / 2 | 0) * 4 + 44);\n    var used = synth.synthWave(new Uint16Array(data.buffer, 44), envelopeFullLength) * 2;\n    var dv = new Uint32Array(data.buffer, 0, 44);\n    // Initialize header\n    dv[0] = 0x46464952; // \"RIFF\"\n    dv[1] = used + 36;  // put total size here\n    dv[2] = 0x45564157; // \"WAVE\"\n    dv[3] = 0x20746D66; // \"fmt \"\n    dv[4] = 0x00000010; // size of the following\n    dv[5] = 0x00010001; // Mono: 1 channel, PCM format\n    dv[6] = 0x0000AC44; // 44,100 samples per second\n    dv[7] = 0x00015888; // byte rate: two bytes per sample\n    dv[8] = 0x00100002; // 16 bits per sample, aligned on every two bytes\n    dv[9] = 0x61746164; // \"data\"\n    dv[10] = used;      // put number of samples here\n  \n    // Base64 encoding written by me, @maettig\n    used += 44;\n    var i = 0,\n        base64Characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n        output = 'data:audio/wav;base64,';\n    for (; i < used; i += 3)\n    {\n      var a = data[i] << 16 | data[i + 1] << 8 | data[i + 2];\n      output += base64Characters[a >> 18] + base64Characters[a >> 12 & 63] + base64Characters[a >> 6 & 63] + base64Characters[a & 63];\n    }\n    return output;\n  }\n\nconst sounds = [\n    // blip\n    [0,,0.1344,,0.195,0.4999,,,,,,,,0.4824,,,,,1,,,0.1,,0.5],\n    \n    // beep beep\n    [0,,0.654,0.3615,0.7695,0.2925,,-0.015,,,,0.046,,0.223,0.539,,-0.3229,,1,,,,0.2159,0.5],\n    \n    // thump\n    [3,,0.3696,0.2535,0.4037,0.0999,,-0.0134,,,,,,,,0.4544,0.2196,-0.1392,1,,,,,0.5],\n    [3,,0.2579,0.3189,0.3249,0.0597,,0.1712,,,,-0.2342,0.6582,,,0.4716,-0.2343,-0.1203,1,,,,,0.5],\n    [3,,0.3455,0.514,0.3441,0.1119,,0.0362,,,,,,,,,,,1,,,,,0.5],\n\n    // drink\n    [0,,0.3403,,0.3456,0.25,,0.0916,,,,,,0.137,,,,,1,,,,,0.5],\n    [0,,0.3403,,0.3184,0.2172,0.0192,0.0916,,,,0.0409,0.0441,0.1705,0.01,0.0017,-0.0489,,1,-0.0258,0.0765,,,0.5],\n\n    // drop glass\n    [1,,0.0571,,0.466,0.3898,,0.1875,,0.6209,0.5363,,,,,,,,1,,,,,0.5]\n]\n\nlet playsound = (index) => {\n    const player = new Audio()\n    player.src = jsfxr(sounds[index])\n    player.play()\n}\n\nexport { playsound }\n","import * as util from './util.js'\nimport { playsound } from './sound.js';\n\nclass Button {\n    constructor(x, y, width, height, text, bgcolour, hcolour, colour, fontSize, margin) {\n        this.x = x\n        this.y = y\n        this.width = width\n        this.height = height\n        this.text = text\n        this.bgcolour = bgcolour\n        this.colour = colour\n        this.fontSize = fontSize\n        this.margin = margin\n        this.hcolour = hcolour\n        this.highlight = false\n        this.enabled = true\n    }\n\n    render(ctx) {\n        //draw bg box\n        if(this.bgcolour) {\n            if(this.highlight) { ctx.fillStyle = this.hcolour } else { ctx.fillStyle = this.bgcolour }\n            ctx.fillRect(this.x, this.y, this.width, this.height)\n        }\n        if(this.fontSize) {\n            ctx.font = 'bold ' + this.fontSize + 'px Arial'\n        }\n        ctx.fillStyle = this.colour\n        ctx.textBaseline = \"hanging\"\n        ctx.fillText(this.text, this.x + this.margin, this.y + this.margin, this.width)\n    }\n\n    hover(mx, my, c) {\n        if(this.enabled && util.contains(mx, my, this.x, this.y, this.width, this.height)) {\n            this.highlight = true\n            c.style.cursor = 'pointer'\n        } else {\n            this.highlight = false\n            c.style.cursor = 'default'\n        }\n        return this.highlight\n    }\n\n    click(mx, my) {\n        if(this.enabled && util.contains(mx, my, this.x, this.y, this.width, this.height)) {\n            playsound(0)\n            this.action()\n        }\n    }\n\n    action() {}\n}\n\nexport default Button","import State from './state.js'\nimport Button from './button.js'\n\nclass TitleState extends State {\n    constructor(c, i) {\n        super(c, i)\n\n        let actions = {\n            'Story': 'stor',\n            'Start': 'play',\n            'Controls': 'cali'\n        }\n\n        this.buttons = []\n\n        let count = 0\n\n        Object.keys(actions).forEach(key => {\n            let a = actions[key]\n            let button = new Button(1366/2 - 60, 500 + count * 60, 120, 40, key, 'black', 'red', 'white', 24, 10)\n            button.action = () => {\n                this.next(a)\n            }\n            this.buttons.push(button)\n            count++\n        })\n    }\n\n    render(ctx) {\n        this.buttons.forEach(b => {\n            b.render(ctx)\n        })\n    }\n\n    update() {\n        \n    }\n\n    handleMove(mx, my, c) {\n        for(let i = 0; i < this.buttons.length; i++) {\n            if(this.buttons[i].hover(mx, my, c)) {\n                break\n            }\n        }\n    }\n\n    handleClick(mx, my) {\n        this.buttons.forEach(b => {\n            b.click(mx, my)\n        })\n    }\n}\n\nexport default TitleState\n","import { drawImage, timestamp } from './util.js'\n\nclass Head {\n    constructor(x,y,c) {\n        this.x = x\n        this.y = y\n        this.c = c\n\n        this.busy = false\n        this.eyesclosed = false\n\n        this.eyes = {\n            x: this.x + 128,\n            y: this.y + 187,\n            moving: false,\n            tx: this.x + 128,\n            ty: this.y + 187,\n            timer: timestamp()\n        }\n    }\n\n    render(c) {\n        // head\n        c.drawImage(this.c[4], this.x, this.y)\n        // eyes\n        \n        if(!this.eyesclosed) {\n            // left\n            c.drawImage(this.c[0], this.x + 108, this.y + 167)\n            // pupil\n            c.drawImage(this.c[8], this.eyes.x, this.eyes.y)\n        } else {\n            drawImage(c, this.c[1], this.x + 108, this.y + 167, this.c[1].height, this.c[1].width, 0, true)\n        }\n        if(!this.eyesclosed) {\n            // right\n            c.drawImage(this.c[0], this.x + 258, this.y + 167)\n            // pupil\n            c.drawImage(this.c[8], this.eyes.x + 150, this.eyes.y)\n        } else {\n            c.drawImage(this.c[1], this.x + 258, this.y + 167)\n        }\n        // nose\n        c.drawImage(this.c[3], this.x + 150, this.y + 217)\n        // mouth\n        c.drawImage(this.c[9], this.x + 125, this.y + 360)\n        // hair\n        // left\n        c.drawImage(this.c[7], this.x + 53, this.y + 81)\n        // right\n        c.drawImage(this.c[7], this.x + 363, this.y + 81)\n        // eyebrows\n        // left\n        c.drawImage(this.c[6], this.x + 100, this.y + 100)\n        // right\n        c.drawImage(this.c[6], this.x + 255, this.y + 100)\n    }\n\n    update(global) {\n        global.grabthese.forEach(g => {\n            if(this.checkHover(g)) {\n                if(!g.isExhausted()) {\n                    if(!g.isInAction()) {\n                        g.startAction()\n                    }\n                    this.busy = true\n                    if(g.closeEyes) {\n                        this.closeEyes()\n                    }\n                } else {\n                    if(g.isInAction()) {\n                        g.endAction()\n                    }\n                    this.busy = false\n                    if(g.closeEyes) {\n                        this.openEyes()\n                    }\n                }\n            } else {\n                if(g.isInAction()) {\n                    g.endAction()\n                }\n                this.busy = false\n                this.openEyes()\n            }\n        })\n        if(!this.eyesclosed) {\n            this.updateEyes()\n        }\n    }\n\n    checkHover(g) {\n        return g.checkHover(this.x + 125, this.y + 360, this.c[9].width, this.c[9].height)\n    }\n\n    closeEyes() {\n        this.eyesclosed = true\n    }\n\n    openEyes() {\n        this.eyesclosed = false\n    }\n\n    updateEyes() {\n        let now = timestamp()\n        if ( this.eyes.moving ) {\n\n            if ( this.eyes.x < this.eyes.tx ) {\n                this.eyes.x++;\n            }\n            if ( this.eyes.x > this.eyes.tx ) {\n                this.eyes.x--;\n            }\n            if ( this.eyes.y < this.eyes.ty ) {\n                this.eyes.y++;\n            }\n            if ( this.eyes.y > this.eyes.ty ) {\n                this.eyes.y--;\n            }\n            if ( this.eyes.x === this.eyes.tx && this.eyes.y === this.eyes.ty ) {\n                this.eyes.moving = false;\n            }\n        } else {\n            if ( now - this.eyes.timer > 2000) {\n                const radius = 14;\n                const angle = Math.random() * Math.PI * 2;\n                const nx = Math.floor(Math.cos(angle) * radius);\n                const ny = Math.floor(Math.sin(angle) * radius);\n\n                this.eyes.tx = this.x + nx + 128;\n                this.eyes.ty = this.y + ny + 187;\n\n                this.eyes.moving = true;\n                this.eyes.timer = timestamp()\n            }\n        }\n    }\n}\n\nexport default Head","import { playsound } from './sound.js'\n\n// this allows a thing to grab other things\nclass Grabber {\n    constructor(x, y, c, imageindex, grabwidth, grabheight, offsetX, offsetY) {\n        this.x = x\n        this.y = y\n        this.c = c\n\n        this.target = null\n\n        let i = this.c[imageindex]\n\n        this.iw = Math.floor(i.width / 2) + offsetX\n        this.ih = Math.floor(i.height / 2) + offsetY\n        this.oX = Math.floor(this.iw - grabwidth / 2)\n        this.oY = Math.floor(this.ih - grabheight / 2)\n        \n        this.gx = this.x + this.oX\n        this.gy = this.y + this.oY\n        this.gw = grabwidth\n        this.gh = grabheight\n    }\n\n    update() {\n        if(this.x < -100) {\n            this.x = -100;\n        }\n        if(this.x > 1200) {\n            this.x = 1200;\n        }\n        if(this.y < -100) {\n            this.y = -100;\n        }\n        if(this.y > 650) {\n            this.y = 650;\n        }\n\n        // update the grab offset\n        this.gx = this.x + this.oX\n        this.gy = this.y + this.oY\n        this.moveGrab()\n    }\n\n    grabThing(target) {\n        if(!this.target) {\n            if(target.checkGrab(this.gx, this.gy, this.gw, this.gh)) {\n                playsound(0)\n                this.target = target\n            }\n        }\n    }\n\n    moveGrab() {\n        if(this.target) {\n            this.target.moveGrab(this.gx, this.gy)\n\n            if((this.target.isExhausted() || this.target.canBeChucked())&& this.target.gy < 30) {\n                this.target.releaseAction()\n                this.target = null\n            }\n        }\n    }\n}\n\nexport default Grabber","import { overlaps, drawImage } from './util.js'\nimport Grabber from './grabber.js'\n\nclass Hand extends Grabber {\n    constructor(x, y, c, flip) {\n        // center grabber, image 11, size is 30x30\n        super(x,y,c, 2, 30, 30, 0, 20)\n\n        this.imageIndex = 2\n        this.w = this.c[2].width\n        this.h = this.c[2].height\n        this.angle = 90\n        this.flip = flip\n        if(flip) {\n            this.angle = -90\n        }\n\n        this.hbx = this.x\n        this.hby = this.y\n        this.hbw = this.c[2].height\n        this.hbh = this.c[2].width\n\n        this.downCount = 0\n    }\n\n    render(c) {\n        if(this.target) {\n            this.target.render(c, true)\n        }\n        drawImage(c,this.c[2], this.x, this.y, this.w, this.h, this.angle, this.flip)\n        // render the grabber hitpoint\n        //c.fillStyle = 'blue'\n        //c.fillRect(this.gx, this.gy, this.gw, this.gh)\n\n        /*\n        c.strokeStyle = 'red'\n        c.beginPath()\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh)\n        c.stroke()\n        */\n    }\n\n    update(global) {\n        super.update()\n        this.hbx = this.x + 50\n        this.hby = this.y - 50\n\n        if(!this.target) {\n            global.grabthese.forEach(g => {\n                this.grabThing(g)\n            })\n        }\n        if(this.target && this.target.dead) {\n            this.target = null\n        }\n    }\n\n    move(incX, incY) {\n        if(incX !== null) {\n            this.x += incX\n        }\n        if(incY !== null) {\n            this.oldy = this.y\n            this.y += incY\n\n            if(this.y > this.oldy) {\n                this.downCount += Math.abs((this.y - this.oldy))\n            } else {\n                this.downCount = 0\n            }\n        }\n    }\n\n    collideWith(list) {\n        for(let i = 0; i < list.length; i++) {\n            if(!list[i].grabbed) {\n                if(overlaps(this.hbx, this.hby, this.hbw, this.hbh,\n                            list[i].hbx, list[i].hby, list[i].hbw, list[i].hbh\n                ) > 1.0) {\n                    return { 'r': true, 'c': this.downCount, 'o': list[i] }\n                }\n            }\n        }\n        return { 'r': false }\n    }\n}\n\nexport default Hand\n","import Head from './head.js'\nimport { drawImage } from './util.js'\nimport Hand from './hand.js'\n\nclass Giant {\n    constructor(x,y,c) {\n        this.x = x\n        this.y = y\n        this.c = c\n        //428, 385\n        //469, 22\n        this.head = new Head(x + 51, y - 363, c)\n        this.fw = this.c[2].width\n        this.fh = this.c[2].height\n\n        this.lefthand = new Hand(this.x - 300, this.y + 180, c, false)\n        this.righthand = new Hand(this.x + 600, this.y + 180, c, true)\n    }\n\n    render(c) {\n        // body\n        c.drawImage(this.c[5], this.x, this.y)\n        this.head.render(c)\n        // hands\n        \n        // left\n        //drawImage(c,this.c.imgs[2], this.x - 300, this.y + 150, this.fw, this.fh, 90)\n        \n        // right\n        //drawImage(c,this.c.imgs[2], this.x + 600, this.y + 90, this.fw, this.fh, -90, true)\n        this.lefthand.render(c)\n        this.righthand.render(c)\n    }\n\n    update(global) {\n        this.head.update(global)\n        this.lefthand.update(global)\n        this.righthand.update(global)\n    }\n\n    moveLeft(dx, dy) {\n        this.lefthand.move(dx, dy)\n    }\n\n    moveRight(dx, dy) {\n        this.righthand.move(dx, dy)\n    }\n\n    /* (handleMove(x,y) {\n        this.righthand.x = x\n        this.righthand.y = y\n    } */\n}\n\nexport default Giant","import { overlaps } from './util.js'\n\n// this allows a thing to be grabbed and also triggers when held over a hoverpoint\nclass Grabbable {\n    constructor(x, y, c, imageindex, grabwidth, grabheight, percentage, offsetX, offsetY, hoverX, hoverY, hoverWidth, hoverHeight) {\n        this.x = x\n        this.y = y\n        this.c = c\n        this.percentage = percentage\n\n        this.grabbed = false\n\n        let i = this.c[imageindex]\n\n        this.iw = Math.floor(i.width / 2) + offsetX\n        this.ih = Math.floor(i.height / 2) + offsetY\n        this.oX = Math.floor(this.iw - grabwidth / 2)\n        this.oY = Math.floor(this.ih - grabheight / 2)\n        \n        this.gx = this.x + this.oX\n        this.gy = this.y + this.oY\n        this.gw = grabwidth\n        this.gh = grabheight\n\n        // hover target is just a box\n        this.hox = hoverX\n        this.hoy = hoverY\n        this.hx = this.x + this.hox\n        this.hy = this.y + this.hoy\n        this.hw = hoverWidth\n        this.hh = hoverHeight\n    }\n\n    update() {\n        // update the grab offset\n        this.gx = this.x + this.oX\n        this.gy = this.y + this.oY\n        this.hx = this.x + this.hox\n        this.hy = this.y + this.hoy\n    }\n\n    checkGrab(px, py, w, h) {\n        if(!this.grabbed) {\n            let p = overlaps(px, py, w, h, this.gx, this.gy, this.gw, this.gh)\n            if(p >= this.percentage) {\n                this.grabbed = true\n                return true\n            }\n        }\n        return false\n    }\n\n    moveGrab(cx, cy) {\n        // center the grabbed item on the provided point\n        if(this.grabbed) {\n            this.x = cx - this.iw\n            this.y = cy - this.ih\n            this.gx = this.x + this.oX\n            this.gy = this.y + this.oY\n            this.hx = this.x + this.hox\n            this.hy = this.y + this.hoy\n        }\n    }\n\n    checkHover(px, py, w, h) {\n        if(this.grabbed) {\n            let p = overlaps(px, py, w, h, this.hx, this.hy, this.hw, this.hh)\n            if(p >= this.percentage) {\n                return true\n            }\n        }\n        return false\n    }\n\n    isExhausted() {\n        return false\n    }\n\n    canBeChucked() {\n        return false\n    }\n\n    isInAction() {\n        return false\n    }\n\n    startAction() {\n    }\n\n    endAction() {\n    }\n\n    releaseAction() {\n    }\n}\n\nexport default Grabbable","import { timestamp, randomint } from './util.js'\nimport Grabbable from './grab.js'\nimport { playsound } from './sound.js'\n\nconst STATE = {\n    STANDING: 0,\n    HELD: 1,\n    DRINKING: 2,\n    EMPTY: 3,\n    FALLING: 4\n}\n\nclass Beer extends Grabbable {\n    constructor(x,y,c) {\n        // center grabber, image 14, size is 30x30, 25% overlap\n        // hover target\n        super(x,y,c, 13, 60, 200, 2.0, 120, 20,  100, 60, 100, 80)\n\n        this.state = STATE.STANDING\n        this.energy = 100\n        this.ts = timestamp()\n        this.closeEyes = true\n        this.chomp = false\n\n        this.hbx = this.x\n        this.hby = this.y\n        this.hbw = this.c[13].width\n        this.hbh = this.c[13].height\n        this.flip = false\n    }\n\n    render(c, override) {\n        if(this.x > 1366) {\n            return\n        }\n        // render the hitbox\n        /*\n        c.strokeStyle = 'red';\n        c.beginPath();\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh);\n        c.stroke();\n        */\n\n        let i = 13\n        switch(this.state) {\n            case STATE.DRINKING:\n                i = 14\n                break\n            case STATE.FALLING:\n            case STATE.EMPTY:\n                i = 15\n                break\n        }\n\n        if(this.isFalling()) {\n            c.drawImage(this.c[i], this.x, this.y)\n            return\n        }\n\n        // don't render it if grabbed, let the grabber render it using override\n        if(!this.grabbed || override) {\n            c.drawImage(this.c[i], this.x, this.y)\n        }\n        // render the grabber hitpoint\n        //c.fillStyle = 'red'\n        //c.fillRect(this.gx, this.gy, this.gw, this.gh)\n\n        /*if(this.isInAction()) {\n            c.fillStyle = 'black'\n        } else {\n            c.fillStyle = 'orange'\n        }*/\n        //c.fillRect(this.hx, this.hy, this.hw, this.hh)\n    }\n\n    update() {\n        super.update()\n\n        this.hbx = this.x;\n        this.hby = this.y;\n\n        if(this.state === STATE.DRINKING) {\n            let t = timestamp()\n            if(t >= this.ts) {\n                this.ts = timestamp() + 300\n                if(this.energy > 0) {\n                    this.energy -= 10\n                    playsound(randomint(5,6))\n                }\n            }\n        }\n        if(this.isFalling() && this.y < 1400) {\n            this.y += 20;\n        }\n        if((this.isFalling() && this.y >= 1400) || \n            (this.state === STATE.STANDING && this.x < -400)) {\n            this.reset()\n        }\n    }\n\n    reset() {\n        this.x = 3000 + randomint(200, 300)\n        this.y = 317 - 86\n        this.state = STATE.STANDING\n        this.energy = 100;\n        this.ts = timestamp()\n        this.grabbed = false\n    }\n\n    isFalling() {\n        return this.state === STATE.FALLING\n    }\n\n    isInAction() {\n        return this.state === STATE.DRINKING\n    }\n\n    startAction() {\n        if(this.grabbed && this.energy > 0) {\n            this.ts = timestamp() + 300\n            this.state = STATE.DRINKING\n        }\n    }\n\n    endAction() {\n        if(this.grabbed) {\n            if(this.energy > 0) {\n                this.state = STATE.HELD\n            } else {\n                this.state = STATE.EMPTY\n            }\n        }\n    }\n\n    isExhausted() {\n        //console.log(this.energy)\n        return this.energy <= 0\n    }\n\n    releaseAction() {\n        this.state = STATE.FALLING\n        playsound(7)\n    }\n}\n\nexport default Beer","import { playsound } from './sound.js'\nimport { drawImage, overlaps, rad, timestamp } from './util.js'\n\nclass Van {\n    constructor(x, y, config) {\n        this.x = x\n        this.y = y\n        this.c = config\n\n        this.ismoving = true\n        this.hasbeeped = false\n\n        this.rot = 0\n        this.bob = 0\n        this.inc = 1\n        this.count = 0\n\n        this.hbx = this.x + this.c[19].width - 30\n        this.hby = this.y\n        this.hbw = 30\n        this.hbh = this.c[13].height\n\n        this.showclock = false\n        this.cend = 0\n        this.ccols = [ '#0f0', '#ff0','#ffa500', '#f00']\n        this.cindex = 0\n        this.cinc = 1\n        this.tinc = Math.floor(15000 / 360)\n        this.cts = timestamp()\n    }\n\n    drawPieSlice(ctx,centerX, centerY, radius, startAngle, endAngle, color ){\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(centerX,centerY);\n        ctx.arc(centerX, centerY, radius, startAngle, endAngle);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    render(c) {\n        // draw the van\n        c.drawImage(this.c[19], this.x, this.y - this.bob)\n        // and the wheels\n        // front\n        drawImage(c, this.c[20], this.x + 131, this.y + 78, 44, 44, this.rot)\n        // back\n        drawImage(c, this.c[20], this.x + 23, this.y + 78, 44, 44, this.rot)\n\n        // render the hitbox\n        /*c.strokeStyle = this.ccol\n        c.beginPath()\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh)\n        c.stroke()*/\n\n        if(this.showclock) {\n            c.drawImage(this.c[0], this.x + 50, this.y - 100)\n            this.drawPieSlice(c, this.x + 91, this.y - 100 + 41, 37, rad(- 90), rad(this.cend - 90), this.ccols[this.cindex])\n        }\n        \n    }\n\n    startClock() {\n        if(!this.showclock) {\n            this.cend = 0\n            this.showclock = true\n            this.cindex = 0\n            this.cts = timestamp() + this.tinc\n        }\n    }\n\n    stopClock() {\n        this.showclock = false\n    }\n\n    update() {\n        // bob up and down\n        \n        if(this.count > 3) {\n            this.count = 0\n            this.bob += this.inc\n            if(this.bob > 1) {\n                this.inc = -1\n            }\n            if(this.bob < 0) {\n                this.inc = 1\n            }\n        }\n        this.count++\n\n        // wheels rotate if we're moving\n        if(this.ismoving) {\n            this.rot -= 2\n            if(this.rot < -360) {\n                this.rot = 0\n            }\n        }\n\n        if(!this.ismoving) {\n            // increment the clock\n            if(timestamp() > this.cts) {\n                this.cend += this.cinc\n                this.cts = timestamp() + this.tinc\n                \n                if(this.cend > 180 && this.cend <= 270) {\n                    if(this.cindex < 1) {\n                        this.hasbeeped = false\n                        this.beep()\n                    }\n                    this.cindex = 1\n                }\n\n                if(this.cend > 270 && this.cend <= 315) {\n                    if(this.cindex < 2) {\n                        this.hasbeeped = false\n                        this.beep()\n                    }\n                    this.cindex = 2\n                }\n                if(this.cend > 315) {\n                    if(this.cindex < 3) {\n                        this.hasbeeped = false\n                        this.beep()\n                    }\n                    this.cindex = 3\n                }\n                \n                if(this.cend <= 180) {\n                    this.cindex = 0\n                }\n\n            }\n        }\n    }\n\n    collideWith(list) {\n        for(let i = 0; i < list.length; i++) {\n            if(!list[i].grabbed) {\n                if(list[i].name) {\n                    //console.log('Checking ' + list[i].name)\n                    \n                    //console.log(this.hbx, this.hby, this.hbw, this.hbh)\n                    //console.log(list[i].hbx, list[i].hby, list[i].hbw, list[i].hbh)\n\n                    let r = overlaps(this.hbx, this.hby, this.hbw, this.hbh,\n                        list[i].hbx, list[i].hby, list[i].hbw, list[i].hbh)\n                    //console.log('r is ', r)\n                }\n\n                if(overlaps(this.hbx, this.hby, this.hbw, this.hbh,\n                            list[i].hbx, list[i].hby, list[i].hbw, list[i].hbh\n                ) > 0.0) {\n                    this.beep()\n                    this.ismoving = false\n                    this.startClock()\n                    return true\n                }\n            }\n        }\n        this.hasbeeped = false\n        this.ismoving = true\n        this.stopClock()\n        return false\n    }\n\n    beep() {\n        if(!this.hasbeeped) {\n            playsound(1)\n            window.setTimeout(playsound, 400, 1)\n            this.hasbeeped = true\n        }\n    }\n}\n\nexport default Van","import { randomint, drawImage } from './util.js'\n\nclass House {\n    constructor(x, y, config) {\n        this.x = x\n        this.y = y\n        this.oldy = y\n        this.c = config\n\n        this.hbx = this.x\n        this.hby = this.y\n        this.hbw = this.c[22].width\n        this.hbh = this.c[22].height\n        \n        this.miny = this.y + 270\n        this.grabbed = false\n        this.bashed = false\n\n        this.alts = [ 22, 30, 31 ]\n        this.i = 22\n        this.flip = false\n        this.changeCostume()\n    }\n\n    changeCostume() {\n        if(this.alts.length > 0) {\n            this.i = this.alts[randomint(0, this.alts.length - 1)]\n        }\n    }\n\n    render(c) {\n        // draw the house\n        drawImage(c, this.c[this.i], this.x, this.y, this.hbw, this.hbh, 0, this.flip)\n\n        // render the hitbox\n        \n        /* c.strokeStyle = 'red'\n        c.beginPath()\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh)\n        c.stroke() */\n    }\n\n    update() {\n        this.hbx = this.x\n        this.hby = this.y\n\n        if(this.x < -400) {\n            this.x = 1500 + randomint(0, 1000)\n            this.y = this.oldy\n            this.bashed = false\n            this.changeCostume()\n            this.flip = !this.flip\n        }\n    }\n\n    bash(power) {\n        this.y += Math.ceil(power * 0.1)\n        if(this.y > this.miny) {\n            this.y = this.miny\n        }\n    }\n}\n\nexport default House","import { timestamp, randomint, drawImage } from './util.js'\nimport Grabbable from './grab.js'\nimport { playsound } from './sound.js'\n\nconst STATE = {\n    STANDING: 0,\n    HELD: 1,\n    EATED: 2,\n    EMPTY: 3,\n    FALLING: 4\n}\n\n// a generic thing you can grab, eat and smash\nclass Thing extends Grabbable {\n    constructor(x, y, c, index, w, h, flip) {\n        super(x,y,c, index, w - 20, h - 20, 2.0, 10, 10, 10, 10, w - 20, h - 20)\n\n        this.oldy = y\n        this.i = index\n\n        this.state = STATE.STANDING\n        this.energy = 100\n        this.ts = timestamp()\n        this.closeEyes = true\n        this.chomp = true\n        this.dead = false\n        this.flip = flip\n        this.w = w\n        this.h = h\n\n        this.hbx = this.x\n        this.hby = this.y\n        this.hbw = this.c[index].width\n        this.hbh = this.c[index].height\n\n        // aternative colour versions\n        this.alts = []\n    }\n\n    changeCostume() {\n        if(this.alts.length > 0) {\n            this.i = this.alts[randomint(0, this.alts.length - 1)]\n        }\n    }\n\n    drawWheels(c) {\n        if(this.i >= 24 && this.i <= 27) {\n            let o = 0\n            if(this.flip) {\n                o = 22\n            }\n            // and the wheels\n            // front\n            drawImage(c, this.c[20], this.x + 131 + o, this.y + 78, 44, 44, 0)\n            // back\n            drawImage(c, this.c[20], this.x + 23 + o, this.y + 78, 44, 44, 0)\n        }\n    }\n\n    render(c, override) {\n        if(this.dead) {\n            return\n        }\n\n        if(this.isFalling()) {\n            //c.drawImage(this.c[this.i], this.x, this.y)\n            drawImage(c, this.c[this.i], this.x, this.y, this.w, this.h, 0, this.flip)\n            this.drawWheels(c)\n            return\n        }\n\n        if(!this.grabbed || override) {\n            drawImage(c, this.c[this.i], this.x, this.y, this.w, this.h, 0, this.flip)\n            this.drawWheels(c)\n        }\n\n        /*\n        c.strokeStyle = 'red';\n        c.beginPath();\n        c.rect(this.hbx, this.hby, this.hbw, this.hbh);\n        c.stroke();\n\n        c.strokeStyle = 'black';\n        c.beginPath();\n        c.rect(this.gx, this.gy, this.gw, this.gh)\n        c.stroke();*/\n    }\n\n    update() {\n\n        if(this.x < -200 || this.dead) {\n            this.x = 1500 + randomint(0, 800)\n            this.y = this.oldy\n            this.dead = false\n            this.state = STATE.STANDING\n            this.grabbed = false\n            this.energy = 100\n            this.ts = timestamp()\n            this.flip = !this.flip\n            this.changeCostume()\n        }\n\n        super.update()\n        this.hbx = this.x\n        this.hby = this.y\n\n        if(this.state === STATE.EATED) {\n            let t = timestamp()\n            if(t >= this.ts) {\n                this.ts = timestamp() + 300\n                if(this.energy > 0) {\n                    this.energy = 0\n                    playsound(5)\n                }\n            }\n        }\n        if(this.isFalling() && this.y < 1400) {\n            this.y += 20;\n        }\n        if((this.isFalling() && this.y >= 800) || \n            (this.state === STATE.STANDING && this.x < -400)) {\n            this.dead = true\n        }\n\n        if(this.state == STATE.EMPTY) {\n            this.dead = true\n        }\n    }\n\n    isFalling() {\n        return this.state === STATE.FALLING\n    }\n\n    isInAction() {\n        return this.state === STATE.EATED\n    }\n\n    startAction() {\n        if(this.grabbed && this.energy > 0) {\n            this.ts = timestamp() + 300\n            this.state = STATE.EATED\n        }\n    }\n\n    endAction() {\n        if(this.grabbed) {\n            if(this.energy > 0) {\n                this.state = STATE.HELD\n            } else {\n                this.state = STATE.EMPTY\n            }\n        }\n    }\n\n    isExhausted() {\n        //console.log(this.energy)\n        return this.energy <= 0\n    }\n\n    canBeChucked() {\n        return true\n    }\n\n    releaseAction() {\n        this.energy = 0\n        this.grabbed = true\n        this.state = STATE.FALLING\n        playsound(7)\n    }\n}\n\nexport default Thing","import State from './state.js'\nimport Giant from './giant.js'\nimport Beer from './beer.js'\nimport { drawImage, randomint, timestamp } from './util.js'\nimport { playsound } from './sound.js'\nimport Van from './van.js'\nimport House from './house.js';\nimport Thing from './thing.js';\n\nclass PlayState extends State {\n    constructor(c, i) {\n        super(c, i)\n\n        this.global = {\n            grabthese: [],\n            bashthese: [],\n            collide: []\n        }\n\n        this.speed = 2;\n    }\n\n    init() {\n\n        //console.log(this.config)\n\n        this.giant = new Giant(428, 345, this.imgs)\n        this.beer = new Beer(2000, 317 - 86, this.imgs)\n        this.van = new Van(20, 553, this.imgs)\n        this.house = new House(800, 404, this.imgs)\n\n        this.things = []\n\n        this.thing1 = new Thing(2200, 553, this.imgs, 24, this.imgs[24].width, this.imgs[24].height, true)\n        this.thing2 = new Thing(1500, 530, this.imgs, 23, this.imgs[23].width, this.imgs[23].height, false)\n\n        this.thing1.alts = [ 24, 25, 26, 27 ] // van\n        this.thing2.alts = [ 23, 28, 29 ] // tractor\n        this.thing1.changeCostume();\n        this.thing2.changeCostume();\n        console.log('l', this.imgs.length)\n\n        this.things.push(this.thing1)\n        this.things.push(this.thing2)\n        this.things.push(this.beer)\n        //this.things.push(this.house)\n\n        this.global.grabthese.push(this.beer)\n        this.global.grabthese.push(this.thing1)\n        this.global.grabthese.push(this.thing2)\n        \n        this.global.bashthese.push(this.house)\n        this.global.collide.push(this.house)\n        this.global.collide.push(this.beer)\n        this.global.collide.push(this.thing1)\n        this.global.collide.push(this.thing2)\n\n\n        // generate the two bg layers\n        this.offset1 = -10\n        this.offset2 = -40\n\n        this.goffset = -10\n\n        this.stopped = false;\n\n        CanvasRenderingContext2D.prototype.shakeScreen = (g, x, y) => {\n            let imgData = g.getImageData(0,0, 1366, 768)\n            g.fillStyle = 'black'\n            g.fillRect(0, 0, 1366, 768)\n            g.putImageData(imgData, x, y)\n        }\n\n        this.trees = []\n        for(let t = 0; t < 4; t++) {\n            this.trees.push({ 'x': t * randomint(300,600) + randomint(-50,100), 'y': 220 + randomint(0, 40) })\n        }\n\n        this.clouds = []\n        for(let t = 0; t < 4; t++) {\n            this.clouds.push({ 'x': t * randomint(200,1600), 'y': 20 + randomint(0, 40) })\n        }\n\n        // setup gamepad\n        this.gamepads = {}\n        this.initGamepad()\n        //playsound(0)\n\n        this.shaking = false\n        this.shake_timestamp = 0\n        this.gcount = 0\n    }\n\n    render(ctx) {\n\n        // clouds\n        this.renderClouds(ctx)\n\n        // trees in the bg\n        this.renderBG(ctx, this.config.tree1, 6, 360, this.offset1)\n        this.renderBG(ctx, this.config.tree2, 6, 460, this.offset2)\n\n        this.giant.render(ctx)\n\n        // render some trees\n        this.renderTrees(ctx)\n\n\n        //this.beer.render(ctx)\n\n        // render the van/vehicles\n        this.van.render(ctx)\n\n        this.things.forEach(t => {\n            t.render(ctx)\n        })\n\n        // render the grass/plants\n        this.renderGrass(ctx, 15, 768 - 122, this.goffset)\n\n        // render the ground blocks\n        this.renderGround(ctx, 15, 768 - 95, this.goffset)\n\n        this.house.render(ctx)\n\n        //let shakeX = randomint(-25, 25) // rndInt is a global helper of mine just random int from a range of two numbers\n        //let shakeY = randomint(-25, 25)\n\n        if(this.shaking) {\n            ctx.shakeScreen(ctx, 0, randomint(-25, 25))\n\n            if(timestamp() >= this.shake_timestamp) {\n                this.shaking = false\n                //console.log('off')\n            }\n        }\n    }\n\n    renderBG(ctx, tree, qty, Yoffset, Xoffset) {\n        for(let x = 0; x < qty; x++) {\n            drawImage(ctx, tree, x * 300 + Xoffset, Yoffset)\n        }\n    }\n\n    renderGrass(ctx, qty, Yoffset, Xoffset) {\n        for(let x = 0; x < qty; x++) {\n            ctx.drawImage(this.imgs[21], x * 100 + Xoffset, Yoffset)\n        }\n    }\n\n    renderGround(ctx, qty, Yoffset, Xoffset) {\n        for(let x = 0; x < qty; x++) {\n            ctx.drawImage(this.imgs[18], x * 100 + Xoffset, Yoffset)\n        }\n    }\n\n    renderTrees(ctx) {\n        for(let i = 0; i < this.trees.length; i++) {\n            ctx.drawImage(this.imgs[17], this.trees[i].x, this.trees[i].y)\n        }\n    }\n\n    renderClouds(ctx) {\n        for(let i = 0; i < this.clouds.length; i++) {\n            drawImage(ctx, this.imgs[16], this.clouds[i].x, this.clouds[i].y, 320, 225, -10)\n        }\n    }\n\n\n    update() {\n        this.checkGamePads()\n        this.giant.update(this.global)\n        this.van.update()\n        this.house.update()\n        this.things.forEach(t => {\n            t.update()\n        })\n\n        if(this.van.collideWith(this.global.collide)) {\n            this.stopped = true\n        } else {\n            this.stopped = false\n        }\n        //this.stopped = this.van.checkStop()\n\n        // bg offset\n        if(!this.stopped) {\n            this.offset1 -= this.speed / 8 // 0.25\n            this.offset2 -= this.speed / 4 //0.5\n            this.goffset -= this.speed\n            this.house.x -= this.speed\n            for(let i = 0; i < this.trees.length; i++) {\n                this.trees[i].x -= this.speed\n                if(this.trees[i].x < -500) {\n                    this.trees[i].x += randomint(2000, 4000) + randomint(-40, 40)\n                }\n            }\n\n            this.things.forEach(t => {\n                if(!t.grabbed) {\n                    t.x -= this.speed\n                }\n            })\n        }\n        if(this.offset1 < -310) {\n            this.offset1 = -10\n        }\n        if(this.offset2 < -340) {\n            this.offset2 = -40\n        }\n        if(this.goffset < -110) {\n            this.goffset = -10\n            if(this.gcount > 40) {\n                this.speed++\n                this.gcount = 0\n            }\n            this.gcount++\n        }\n        // ground offset\n        for(let i = 0; i < this.clouds.length; i++) {\n            this.clouds[i].x -= 0.1\n            if(this.clouds[i].x < -500) {\n                this.clouds[i].x += randomint(2000, 4000) + randomint(-40, 40)\n            }\n        }\n\n        let bl = this.giant.lefthand.collideWith(this.global.bashthese)\n        let br = this.giant.righthand.collideWith(this.global.bashthese)\n\n        if(bl.r) {\n            //console.log('hit left', bl)\n            this.bashThing(bl.o, bl.c)\n        }\n        if(br.r) {\n            //console.log('hit right', br)\n            this.bashThing(br.o, br.c)\n        }\n    }\n\n    bashThing(object, count) {\n        if(count > 10) {\n            object.bash(count)\n            // play sound\n            playsound(randomint(2,4))\n            this.setShakeScreen(200)\n            object.bashed = false\n        }\n    }\n\n    setShakeScreen(duration) {\n        this.shaking = true\n        this.shake_timestamp = timestamp() + duration\n    }\n\n    finish() {\n        \n    }\n\n    handleMove(mx, my) {\n        //this.giant.handleMove(mx, my)\n    }\n\n    handleClick(mx, my) {}\n\n    /* ------------- Gamepad code -------------- */\n\n    moveHands(a, b, c, d) {\n        this.giant.lefthand.move(a,b)\n        this.giant.righthand.move(c,d)\n    }\n\n    convertValue(value) {\n        //console.log(value)\n        let r = 0\n        if(value > 0.2) {\n            r = 6\n        }\n        if(value > 0.5) {\n            r = 12\n        }\n        if(value > 0.9) {\n            r = 24\n        }\n\n        if(value < -0.2) {\n            r = -6\n        }\n        if(value < -0.5) {\n            r = -12\n        }\n        if(value < -0.9) {\n            r = -24\n        }\n        return r\n    }\n\n    processGamePadInput(axis, value) {\n        let lx_inc = null\n        let ly_inc = null\n        let rx_inc = null\n        let ry_inc = null\n\n        switch(axis) {\n            case 0:\n                lx_inc = this.convertValue(value)\n            break;\n            case 1:\n                ly_inc = this.convertValue(value)\n            break;\n            case 2:\n                rx_inc = this.convertValue(value)\n            break;\n            case 3:\n                ry_inc = this.convertValue(value)\n            break;\n        }\n        this.moveHands(lx_inc, ly_inc, rx_inc, ry_inc)\n    }\n\n    checkGamePads() {\n        let gamepads = navigator.getGamepads()\n        // firefox returns an autoupdating array, chrome returns an object\n        // firefox also does something funky with axes mapping :o\n        if(!Array.isArray(gamepads)) {\n            this.gamepads = gamepads\n        }\n        let keys = Object.keys(this.gamepads)\n        keys.forEach(k => {\n            let controller = this.gamepads[k]\n            if(controller !== null) {\n                if(controller.axes) {\n                    for(let i = 0; i < controller.axes.length; i++) {\n                        let v = controller.axes[i]\n                        if(controller.axes[i].value) {\n                            v = controller.axes[i].value\n                        }\n                        this.processGamePadInput(i, v)\n                    }\n                }\n            }\n        })\n    }\n\n    gamepadHandler(e,c) {\n        let gamepad = e.gamepad\n        if (c) {\n            this.gamepads[gamepad.index] = gamepad\n        } else {\n            delete this.gamepads[gamepad.index]\n        }\n    }\n\n    initGamepad() {\n        let self = this\n        if(!!navigator.getGamepads){\n            window.addEventListener(\"gamepadconnected\", (e) => { self.gamepadHandler(e, true) }, false)\n            window.addEventListener(\"gamepaddisconnected\", (e) => { self.gamepadHandler(e, false) }, false)\n        }\n    }\n}\n\nexport default PlayState\n","const init = callback => {\n    let video = document.getElementById('v')\n\n    const constraints = {\n        audio: false,\n        video: true\n    }\n\n    let successCallback = s => {\n        video.srcObject = s\n        callback(s, video, null)\n    }\n\n    let errorCallback = e => {\n        alert('Unable to access webcam :( -' + e)\n        callback(null, null, e)\n    }\n    // this is deprecated\n    /*if(navigator.getUserMedia) {\n        navigator.getUserMedia(constraints, successCallback, errorCallback)\n    } else {*/\n        // The proper way to call this\n        navigator.mediaDevices.getUserMedia(constraints)\n        .then(stream => {\n            /* use the stream */\n            successCallback(stream)\n        }).catch(err => {\n            /* handle the error */\n            errorCallback(err)\n        });\n}\n\nconst rgb = (r,g,b) => {\n    return `rgb(${r},${g},${b})`\n}\n\nexport { init, rgb }\n\n","class Blob {\n    constructor(px, py) {\n        this.minx = px\n        this.miny = py\n        this.maxx = px\n        this.maxy = py\n    }\n\n    distSq(x1, y1, x2, y2) {\n        return (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1)\n    }\n\n    render(ctx) {\n        ctx.lineWidth = 4;\n        ctx.strokeStyle = '#fff'\n        ctx.beginPath()\n        ctx.rect((68 - this.minx) * 20 - ((this.maxx - this.minx) * 20), this.miny * 20, (this.maxx - this.minx) * 20, (this.maxy - this.miny) * 20)\n        ctx.stroke()\n    }\n\n    add(px, py) {\n        this.minx = Math.min(this.minx, px)\n        this.miny = Math.min(this.miny, py)\n        this.maxx = Math.max(this.maxx, px)\n        this.maxy = Math.max(this.maxy, py)\n    }\n\n    isNear(px, py) {\n        let c = this.center()\n        let d = this.distSq(c.cx, c.cy, px, py)\n        if(d < 50) {\n            return true\n        }\n        return false\n    }\n\n    size() {\n        return Math.abs((this.maxx - this.minx) * (this.maxy - this.miny))\n    }\n\n    center() {\n        return { cx: (this.minx + this.maxx) / 2, cy: (this.miny + this.maxy) / 2 }\n    }\n}\n\nclass ColourTracker {\n    constructor() {\n        this.blobs = [ [], [] ]\n\n        this.ox = [ 0, 0]\n        this.oy = [ 0, 0]\n    }\n\n    setColours(list) {\n        this.colours = list\n    }\n\n    clearBlobs(index) {\n        if(index !== null) {\n            this.blobs[index] = []\n        } else {\n            this.blobs = [ [], [] ]\n        }\n    }\n\n    updateBlobs(j, px, py) {\n        let found = false\n        for(let i = 0; i < this.blobs[j].length; i++) {\n            if(this.blobs[j][i].isNear(px,py)) {\n                this.blobs[j][i].add(px, py)\n                found = true\n                break;\n            }\n        }\n        if(!found) {\n            this.blobs[j].push(new Blob(px,py))\n        }\n    }\n\n    initHands(g) {\n        g.lefthand.x = 0\n        g.lefthand.y = 0\n        g.righthand.x = 0\n        g.righthand.y = 0\n    }\n\n    update(giant) {\n        if(giant) {\n\n            for(let i = 0; i < this.blobs.length; i++ ) {\n                let index = this.findBiggest(i);\n                if(index !== null) {\n                    let c = this.blobs[i][index].center()\n                    \n                    let dx = (this.ox[i] - c.cx) * 20\n                    let dy = (this.oy[i] - c.cy) * -1 * 20\n                    if(dx == 0) dx = null\n                    if(dy == 0) dy = null\n                    if( i < 1 ) {\n                        giant.moveLeft(dx, dy) \n                    } else {\n                        giant.moveRight(dx, dy)\n                    }\n                    this.ox[i] = c.cx\n                    this.oy[i] = c.cy\n                }\n            }\n        }\n    }\n\n    findBiggest(j) {\n        let maxs = 1\n        let index = null\n        let count = 0\n        this.blobs[j].forEach(b => {\n            if(b.size() > maxs) {\n                maxs = b.size()\n                index = count\n            }\n            count++\n        })\n        return index;\n    }\n\n    render(c) {\n        for(let i = 0; i < this.blobs.length; i++ ) {\n            let index = this.findBiggest(i);\n            if(index !== null) {\n                this.blobs[i][index].render(c)\n            }\n        }\n    }\n}\n\nexport default ColourTracker","import State from './state.js'\nimport { text, fsrect } from './util.js'\nimport * as cam from './cam.js'\nimport Button from './button.js'\nimport Giant from './giant.js'\nimport ColourTracker from './colourtracker.js'\n\nconst MODE = {\n    CONTROL: 0,\n    SHOWCAM: 1,\n    PICK1: 2,\n    PICK2: 3,\n    TEST: 4\n}\n\nclass CalibrateState extends State {\n    constructor(c, i) {\n        super(c, i)\n        \n        this.pickedColour = [];\n\n        this.lines = [\n            'Controls',\n            'You have 3 options to control Hans the Giant\\'s fists:',\n            'Gamepad with dual analog sticks',\n            'Arrow keys + Mouse',\n            'Webcam! - Use 2 bright differently coloured objects to control the fists',\n            'You need 2 bright differently coloured objects for the next part.',\n            'e.g. plastic cups, fat highlighter pens, big pieces of lego, coloured paper.',\n            'A bright red/pink and a yellow/white object are best.',\n            'Green/blue objects probably won\\'t work.',\n            'If your room is too dark this may not work.',\n            'LEFT HAND - Hold up your 1st object and click on its brightest spot.',\n            'The object should (mostly) light up green. This may take a few clicks.',\n            'RIGHT HAND - Hold up your 2nd object and click on its brightest spot.',\n            'The object should (mostly) light up green. This may take a few clicks.',\n            'TIME TO TEST!',\n            'Move your objects in front of the camera and check that both fists move correctly.',\n            'If you are happy with calibration, click PLAY --->'\n        ]\n    }\n    \n    init() {\n        this.button = []\n        this.button[0] = new Button(0, 0, 1, 1, '', 'black', 'red', 'white', 24, 10)\n        this.button[1] = new Button(0, 0, 1, 1, 'Back', 'black', 'red', 'white', 24, 10)\n\n        this.video = null\n        this.stream = null\n        this.camready = false\n\n        this.tracker = new ColourTracker()\n\n        this.startMode()\n    }\n\n    drawDialog(c, index, max, x, y, inc, s) {\n        for(let i = index; i < max; i++) {\n            text(c, this.lines[i], x, y, '#fff', s ? s : 24)\n            y += inc\n        }\n    }\n\n    render(ctx) {\n        this.ctx = ctx\n        switch(this.state) {\n            case MODE.CONTROL:\n                fsrect(ctx, '#5f1e6f')\n                this.drawDialog(ctx, 0, 5, 350, 100, 80)\n                this.button.forEach(b => {\n                    b.render(ctx)\n                })\n            break\n            case MODE.SHOWCAM:\n                if(this.camready) {\n                    this.renderVidStream(ctx, null)\n                    \n                    this.button.forEach(b => {\n                        b.render(ctx)\n                    })\n                    ctx.fillStyle = '#000'\n                    ctx.fillRect(300, 600, 800, 200)\n                    this.drawDialog(ctx, 5, 10, 350, 620, 25, 18)\n                } else {\n                    fsrect(ctx, '#5f1e6f')\n                    text(ctx, 'One moment. Browser may request permission to access webcam.', 350, 300, '#fff', 24)\n                }\n            break\n            case MODE.PICK1:\n                if(this.camready) {\n                    this.renderVidStream(ctx, 0)\n                    \n                    //this.tracker.render(ctx)\n\n                    this.button.forEach(b => {\n                        b.render(ctx)\n                    })\n                    ctx.fillStyle = '#000'\n                    ctx.fillRect(300, 680, 800, 150)\n                    this.drawDialog(ctx, 10, 12, 350, 700, 25, 18)\n                }\n            break\n            case MODE.PICK2:\n                if(this.camready) {\n                    this.renderVidStream(ctx, 1)\n                    \n                    //this.tracker.render(ctx)\n\n                    this.button.forEach(b => {\n                        b.render(ctx)\n                    })\n                    ctx.fillStyle = '#000'\n                    ctx.fillRect(300, 680, 800, 150)\n                    this.drawDialog(ctx, 12, 14, 350, 700, 25, 18)\n                }\n            break\n            case MODE.TEST:\n                if(this.camready) {\n                    this.renderVidStream(ctx, null)\n\n                    this.tracker.render(ctx)\n\n                    this.giant.render(ctx)\n\n                    this.button.forEach(b => {\n                        b.render(ctx)\n                    })\n                    ctx.fillStyle = '#000'\n                    ctx.fillRect(300, 650, 800, 150)\n                    this.drawDialog(ctx, 14, 17, 350, 680, 25, 18)\n                }\n        }\n    }\n\n    distSq(x1, y1, z1, x2, y2, z2) {\n        return (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1) + (z2-z1)*(z2-z1)\n    }\n\n    renderVidStream(c, index) {\n        this.tracker.clearBlobs(index)\n\n        c.drawImage(this.video, 0, 0, this.video.width, this.video.height)\n        let data = c.getImageData(0, 0, this.video.width, this.video.height).data\n            \n        const w = this.video.width\n        const h = this.video.height\n        const step = 20\n        \n        const threshold = 40.0\n\n        // loop through rows and columns\n\n        for (let y = 0; y < h; y++) {\n            for (let x = 0; x < w; x++) {\n                // the data array is a continuous array of red, blue, green \n                // and alpha values, so each pixel takes up four values \n                // in the array\n                let pos = (x + y * w) * 4\n                \n                // get red, blue and green pixel value\n                let r = data[pos]\n                let g = data[pos+1]\n                let b = data[pos+2]\n\n                c.fillStyle = cam.rgb(r, g, b)\n\n                if(this.state === MODE.PICK1 || this.state == MODE.PICK2) {\n                    if(index !== null) {\n                        // render the picked colour blocks\n                        let r2 = this.pickedColour[index][0];\n                        let g2 = this.pickedColour[index][1];\n                        let b2 = this.pickedColour[index][2];\n                    \n                        let d = this.distSq(r, g, b, r2, g2, b2);\n                        if (d < threshold * threshold) {\n                            c.globalAlpha = 0.3\n                            c.fillStyle = 'green'\n                        }\n                    }\n                }\n                if(this.state === MODE.TEST) {\n                    for(let i = 0; i < 2; i++) {\n                        let r2 = this.pickedColour[i][0];\n                        let g2 = this.pickedColour[i][1];\n                        let b2 = this.pickedColour[i][2];\n                        \n                        let d = this.distSq(r, g, b, r2, g2, b2);\n                        if (d < threshold * threshold) {\n                            this.tracker.updateBlobs(i, x, y)\n                        }\n                    }\n                }\n                // draw the pixels as blocks of colours\n                // flipped on the x-axis\n                c.fillRect(((w - 1) - x) * step, y * step, step, step)\n                c.globalAlpha = 1.0\n            }\n        }\n    }\n\n    update() {\n        if(this.state === MODE.TEST) {\n            this.giant.update(this.global)\n            this.tracker.update(this.giant)\n        }\n    }\n\n    finish() {\n        \n    }\n\n    setButton(i, x, y, text, action, w, h) {\n        this.button[i].x = x\n        this.button[i].y = y\n        this.button[i].text = text\n        this.button[i].action = action\n        if(w) this.button[i].width = w\n        if(h) this.button[i].height = h\n    }\n    \n    startMode() {\n        let self = this\n        this.setButton(0, 1366/2 - 200,500, 'Calibrate webcam controls', () => { self.camMode() }, 350, 40)\n        this.setButton(1, 1366/2 - 200,560, 'Back', () => { self.next('titl') }, 350, 40)\n        this.state = MODE.CONTROL\n    }\n\n    camMode() {\n        let self = this\n        this.setButton(0, 0, 650, 'Back', () => { self.startMode() }, 120)\n        this.setButton(1, 1200, 650, 'Next', () => { self.pickMode1() })\n\n        this.state = MODE.SHOWCAM\n        \n        cam.init((s, v, e) => {\n            if(!e) {\n                self.video = v\n                self.stream = s\n                self.camready = true\n            }\n        })\n    }\n\n    pickMode1() {\n        let self = this\n        this.setButton(0, 0, 650, 'Back', () => { self.camMode() }, 120)\n        this.setButton(1, 1200, 650, 'Next', () => { self.pickMode2() })\n\n        if( !this.pickedColour[0] ) {\n            this.pickedColour[0] = [255, 0 ,0]\n        }\n\n        this.state = MODE.PICK1\n    }\n    pickMode2() {\n        let self = this\n        this.setButton(0, 0, 650, 'Back', () => { self.pickMode1() }, 120)\n        this.setButton(1, 1200, 650, 'Next', () => { self.testMode() })\n\n        if( !this.pickedColour[1] ) {\n            this.pickedColour[1] = [255, 0 ,0]\n        }\n\n        this.state = MODE.PICK2\n    }\n\n    testMode() {\n        let self = this\n        this.setButton(0, 0, 650, 'Back', () => { self.pickMode2() }, 120)\n        this.setButton(1, 1200, 650, 'PLAY!', () => { self.next('play') })\n        this.state = MODE.TEST\n\n        if(!this.giant) {\n            this.global = {\n                grabthese: []\n            }\n            this.giant = new Giant(428, 345, this.imgs)\n        }\n\n        this.tracker.initHands(this.giant)\n\n        this.tracker.setColours(this.pickedColour)\n    }\n\n    handleMove(mx, my, c) {\n        this.button.forEach(b => {\n            if(b.hover(mx, my, c)) return\n        })\n    }\n\n    getPickedColour(mx, my) {\n        let data = this.ctx.getImageData(mx, my, 1, 1).data\n        return [data[0], data[1], data[2]]\n    }\n\n    handleClick(mx, my) {\n        this.button.forEach(b => {\n            b.click(mx, my)\n        })\n\n        if(this.state === MODE.PICK1) {\n            this.pickedColour[0] = this.getPickedColour(mx, my)\n        }\n        if(this.state === MODE.PICK2) {\n            this.pickedColour[1] = this.getPickedColour(mx, my)\n        }\n    }\n}\n\nexport default CalibrateState\n","import State from './state.js'\n\nclass StoryState extends State {\n    constructor(c, i) {\n        super(c, i)\n    }\n    \n    init() {\n\n    }\n\n    render(ctx) {\n\n    }\n\n    update() {\n        \n    }\n\n    finish() {\n        \n    }\n\n    handleMove(mx, my) {}\n\n    handleClick(mx, my) {}\n}\n\nexport default StoryState\n","import LoadingState from './classes/loadingstate.js'\nimport TitleState from './classes/titlestate.js'\nimport PlayState from './classes/playstate.js'\nimport CalibrateState from './classes/calibratestate.js'\nimport StoryState from './classes/storystate.js'\n\n(function() {\n    'use strict'\n\n    // start game when page has finished loading\n    window.addEventListener('load', function() {\n        const canvas = document.getElementById('c')\n        const ctx = canvas.getContext('2d')\n        const video = document.getElementById('v')\n        const WIDTH = 1366\n        const HEIGHT = 768\n\n        let currentState = new LoadingState({})\n        //currentState.init()\n        let pause = false\n        let fadeOut = false\n        let fadeIn = false\n        let next = null\n        let config = null\n        let imgs = []\n        let inc = 0.0\n        let alpha = 0\n        \n        let now = () => {\n            return new Date().getTime()\n        }\n\n        let ts = now()\n\n        let cls = () => {\n            ctx.clearRect(0, 0, WIDTH, HEIGHT)\n        }\n\n        // setup miece listeners \n        let initMouse = (c) => {\n            c.addEventListener('click', e => {\n                let r = c.getBoundingClientRect()\n                let x = e.clientX - r.left\n                let y = e.clientY - r.top\n                if(!pause) {\n                    currentState.processClick(x, y)\n                }\n            }, false)\n    \n            c.addEventListener('mousemove', e => {\n                let r = c.getBoundingClientRect()\n                let x = e.clientX - r.left\n                let y = e.clientY - r.top\n                currentState.processMove(x, y, c)\n            }, false)\n        }\n\n        // a bit of code to handle nice state transitions - fade in and out effect\n        let skip = 7\n\n        let startFadeIn = () => {\n            fadeIn = true\n            fadeOut = false\n            alpha = 1.0\n            inc = -0.025\n            pause = true\n            ts = now() + skip\n        }\n\n        let startFadeOut = () => {\n            fadeOut = true\n            fadeIn = false\n            alpha = 0.0\n            inc = 0.025\n            ts = now() + skip\n        }\n\n        let processFade = () => {\n            cls()\n            // render whatever the last view was\n            currentState.render(ctx)\n            // and then draw a great big black box over it\n            ctx.fillStyle = '#000'\n            // update the alpha for the box to get the transition effect\n            ctx.globalAlpha = alpha\n            ctx.fillRect(0, 0, WIDTH, HEIGHT)\n            // don't update the alpha too often\n            if(now() > ts) {\n                alpha += inc\n                ts = now() + skip\n            }\n            // check if the fade is completed\n            if(fadeOut && alpha > 1.0) {\n                nextState()\n            }\n            if(fadeIn && alpha < 0.0) {\n                fadeIn = false\n                pause = false\n            }\n        }\n\n        // this invokes the next state class\n        let nextState = () => {\n            //console.log('Next is', next)\n            switch(next) {\n                case 'play':\n                    currentState = new PlayState(config, imgs)\n                break\n                case 'titl':\n                    currentState = new TitleState(config, imgs)\n                break\n                case 'cali':\n                    currentState = new CalibrateState(config, imgs)\n                break\n                case 'stor':\n                    currentState = new StoryState(config, imgs)\n                break\n            }\n            // dynamic invocation just won't work - webpack omits the class, and rollup mangles the name\n            /*try {\n                currentState = (Function('return new ' + next))()\n            } catch(e) {\n                currentState = new this[next]()\n            }*/\n            currentState.init()\n            startFadeIn()\n        }\n\n        // the main loop\n        let tick = () => {\n            ctx.globalAlpha = 1.0\n            if(!pause) {\n                currentState.update()\n                cls()\n                currentState.render(ctx)\n            }\n            if(fadeOut || fadeIn) {\n                processFade()\n            }\n            requestAnimationFrame(tick)\n        }\n\n        // nicely transition to next state when we get a ns signal\n        window.addEventListener('ns', e => {\n            currentState.finish()\n            next = e.detail.n\n            config = e.detail.c\n            imgs = e.detail.i\n            startFadeOut()\n        }, false)\n\n        // start the main loop\n        initMouse(canvas)\n        currentState.init()\n        tick()\n    })\n})()"],"names":["vg.setPalette","vg.vgrender","vg.replaceColour","util.randomint","util.drawImage","util.fsrect","util.text","text","util.contains","STATE","cam.rgb","cam.init"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}